<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NamomoSpringCamp(div1)题单-概率&amp;期望</title>
    <link href="/2022/05/16/namomo_%E6%A6%82%E7%8E%87/"/>
    <url>/2022/05/16/namomo_%E6%A6%82%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4550">https://www.luogu.com.cn/problem/P4550</a></p><p><a href="https://www.luogu.com.cn/problem/P4316">https://www.luogu.com.cn/problem/P4316</a><br />生日悖论</p><p><a href="https://codeforces.com/contest/280/problem/C">https://codeforces.com/contest/280/problem/C</a></p><p><a href="https://ac.nowcoder.com/acm/contest/32708/B">https://ac.nowcoder.com/acm/contest/32708/B</a></p><p><a href="https://ac.nowcoder.com/acm/contest/32708/G">https://ac.nowcoder.com/acm/contest/32708/G</a></p><p><img src="https://s1.ax1x.com/2022/05/16/OfYiCQ.jpg" alt="pic1" /></p><p><img src="https://s1.ax1x.com/2022/05/16/OfYC4g.jpg" alt="pic2" /><br /><img src="https://s1.ax1x.com/2022/05/16/OfYF3j.jpg" alt="pic3" /></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARC140B-Shorten ARC</title>
    <link href="/2022/05/16/ARC140-B-Shorten_ARC/"/>
    <url>/2022/05/16/ARC140-B-Shorten_ARC/</url>
    
    <content type="html"><![CDATA[<h1 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h1><p>题目给定一个长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 仅由字母<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup><msup><mi>A</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">&#x27;A &#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup><msup><mi>R</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">&#x27;R&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup><msup><mi>C</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">&#x27;C&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 构成。可以进行如下操作：</p><p>在奇数序号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mn>1</mn><mrow><mi>s</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><msub><mn>3</mn><mrow><mi>r</mi><mi>d</mi></mrow></msub><mo separator="true">,</mo><msub><mn>5</mn><mrow><mi>t</mi><mi>h</mi></mrow></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(}1_{st},3_{rd},5_{th}...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">)</span></span></span></span> 操作时，将一组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">ARC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 替换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></p><p>在偶数序号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mn>2</mn><mrow><mi>n</mi><mi>d</mi></mrow></msub><mo separator="true">,</mo><msub><mn>4</mn><mrow><mi>t</mi><mi>h</mi></mrow></msub><mo separator="true">,</mo><msub><mn>6</mn><mrow><mi>t</mi><mi>h</mi></mrow></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(}2_{nd},4_{th},6_{th}...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">)</span></span></span></span> 操作时，将一组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">ARC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 替换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></p><p>请问对于给定字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> ，最多可以操作多少次？</p><h1 id="editorial"><a class="markdownIt-Anchor" href="#editorial"></a> Editorial</h1><p>这道题可以考虑贪心。直接找所有的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> ，然后看这个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 的两边有多少组成对的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 。</p><p>比如说 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>A</mi><mi>A</mi><mi>R</mi><mi>C</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AAARCCC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> ，他的两边有三对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> ，那么就记录下a+=3。同时，一段 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>A</mi><mi>R</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AARCC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 只能支持两次操作（一次奇，一次偶），就会变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 。</p><p>故，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 两边只有1对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 时，只能操作1次 。有2对及以上的时候，只能操作2次。 我们答案取</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi mathvariant="normal">有</mi><mi mathvariant="normal">效</mi><mi>A</mi><mi>C</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">量</mi><mo separator="true">,</mo><mi mathvariant="normal">有</mi><mi mathvariant="normal">效</mi><mi>R</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">数</mi><mo>×</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">min( 有效AC对的数量 , 有效 R 的个数\times 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">效</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">效</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中，我们称在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 两侧按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>R</mi><mi>C</mi><mi>C</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AAAARCCCC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 顺序排好的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 对为有效的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 对，它的数量是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>a</mi></msub><mo separator="true">,</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>c</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">min(cnt_a,cnt_c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>有效 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 指的是在字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 中，左侧有若干个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 且右侧有若干个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 的字符 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,i,j,a,b;<br>string s;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;s;s=<span class="hljs-string">&quot; &quot;</span>+s;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//遍历字符串</span><br>&#123;<br><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;R&#x27;</span>)<span class="hljs-comment">//找到R</span><br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i&amp;&amp;i+j&lt;=n;j++)<span class="hljs-comment">//由R的两边发散</span><br><span class="hljs-comment">//要左右边满足AA..A..R..C..CC</span><br><span class="hljs-keyword">if</span>(s[i-j]!=<span class="hljs-string">&#x27;A&#x27;</span>||s[i+j]!=<span class="hljs-string">&#x27;C&#x27;</span>)<br><span class="hljs-keyword">break</span>;<br>a+=j<span class="hljs-number">-1</span>;<br>b+=j&gt;<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-built_in">min</span>(a,b*<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>伪代码规则</title>
    <link href="/2022/05/13/%E4%BC%AA%E4%BB%A3%E7%A0%81%E8%A7%84%E5%88%99/"/>
    <url>/2022/05/13/%E4%BC%AA%E4%BB%A3%E7%A0%81%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="伪代码规则"><a class="markdownIt-Anchor" href="#伪代码规则"></a> 伪代码规则</h1><h2 id="新变量"><a class="markdownIt-Anchor" href="#新变量"></a> 新变量</h2><p>C/C++</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">int a<span class="hljs-comment">;</span><br>int b<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">不用定义变量<br><span class="hljs-attribute">b</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> 或者 b&lt;-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="新数组"><a class="markdownIt-Anchor" href="#新数组"></a> 新数组</h2><p>C/C++</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">int <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[10]</span>;<br>int <span class="hljs-selector-tag">B</span><span class="hljs-selector-attr">[N]</span><span class="hljs-selector-attr">[M]</span>;<br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">let <span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[0...9]</span> be new array/<span class="hljs-selector-tag">table</span><br>let <span class="hljs-selector-tag">B</span> be <span class="hljs-selector-tag">a</span> N row and M column martix<br></code></pre></td></tr></table></figure><h2 id="循环结构"><a class="markdownIt-Anchor" href="#循环结构"></a> 循环结构</h2><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><p>C/C++</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso">for(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-keyword">max</span>;i++)<br>&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br><br>for(i=<span class="hljs-keyword">max</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">for i=<span class="hljs-number">0</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">max</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span>(注意缩进)<br><br>for i=<span class="hljs-keyword">max</span> downto <span class="hljs-number">0</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span>(注意缩进)<br></code></pre></td></tr></table></figure><h3 id="while"><a class="markdownIt-Anchor" href="#while"></a> while</h3><p>C/C++</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span>(n--)<br>&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h2 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h2><p>C/C++</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">( a )</span></span><br>&#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>( <span class="hljs-selector-tag">b</span> )<br>&#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">if</span> a<br><span class="hljs-params">...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b<br><span class="hljs-params">...</span><br><span class="hljs-keyword">else</span><br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>C/C++</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>&gt;<span class="hljs-number">0</span> &amp;&amp; a&lt;<span class="hljs-number">10</span><br><span class="hljs-attribute">a</span>&gt;<span class="hljs-number">0</span> || a&lt;<span class="hljs-number">10</span><br><br><span class="hljs-attribute">cin</span>&gt;&gt;a;<br><span class="hljs-attribute">cout</span>&lt;&lt;a;<br><br><span class="hljs-attribute">return</span> a;<br></code></pre></td></tr></table></figure><p>伪代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>&gt;<span class="hljs-number">0</span> and <span class="hljs-selector-tag">a</span>&lt;<span class="hljs-number">10</span><br><span class="hljs-selector-tag">a</span>&gt;<span class="hljs-number">0</span> or <span class="hljs-selector-tag">a</span>&lt;<span class="hljs-number">10</span><br><br><span class="hljs-selector-tag">Input</span> (<span class="hljs-selector-tag">a</span>)<br>Output (<span class="hljs-selector-tag">a</span>)<br><br>return <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>湖南多校训练汇总</title>
    <link href="/2022/05/12/hn-train/"/>
    <url>/2022/05/12/hn-train/</url>
    
    <content type="html"><![CDATA[<p>round1</p><p><a href="https://codeforces.com/contestInvitation/77a34ae253d79c497cd883533ca94711e0a68df4">https://codeforces.com/contestInvitation/77a34ae253d79c497cd883533ca94711e0a68df4</a></p><p>round2</p><p><a href="https://codeforces.com/contestInvitation/7a4d540836dd656051708d6d9ec03d64b842d70a">https://codeforces.com/contestInvitation/7a4d540836dd656051708d6d9ec03d64b842d70a</a></p><p>round3</p><p><a href="https://codeforces.com/contestInvitation/46f64e9af8b42ee654b89849f411beaa95f33b2a">https://codeforces.com/contestInvitation/46f64e9af8b42ee654b89849f411beaa95f33b2a</a></p><p>round4</p><p><a href="https://codeforces.com/contestInvitation/56df63864d92b5448f1d8fc70ea643eeae7e7627">https://codeforces.com/contestInvitation/56df63864d92b5448f1d8fc70ea643eeae7e7627</a></p><p>round5</p><p><a href="https://codeforces.com/contestInvitation/5fdf2ad78b2f7074ec597b2b6e38ad166efc6528">https://codeforces.com/contestInvitation/5fdf2ad78b2f7074ec597b2b6e38ad166efc6528</a></p><p>round6</p><p><a href="https://codeforces.com/contestInvitation/5182e2f01a5a8381c3ff5a36696a2b98b99824e0">https://codeforces.com/contestInvitation/5182e2f01a5a8381c3ff5a36696a2b98b99824e0</a></p><p>round7</p><p><a href="https://codeforces.com/contestInvitation/3faa549c689604b2ded77c0a2508f1bdf3a2aa5c">https://codeforces.com/contestInvitation/3faa549c689604b2ded77c0a2508f1bdf3a2aa5c</a></p><p>round8</p><p><a href="https://codeforces.com/contestInvitation/156e53bd70c7c18d84fbc3e64f4ebea1d2964798">https://codeforces.com/contestInvitation/156e53bd70c7c18d84fbc3e64f4ebea1d2964798</a></p><p>round9</p><p><a href="https://codeforces.com/contestInvitation/6140163f499651ce9e6d6fafb7c37a61394714c8">https://codeforces.com/contestInvitation/6140163f499651ce9e6d6fafb7c37a61394714c8</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些乱七八糟的东西</title>
    <link href="/2022/05/12/%E4%B8%80%E4%BA%9B%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <url>/2022/05/12/%E4%B8%80%E4%BA%9B%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="一-代码习惯"><a class="markdownIt-Anchor" href="#一-代码习惯"></a> 一、代码习惯</h2><h3 id="1代码缩进"><a class="markdownIt-Anchor" href="#1代码缩进"></a> 1.代码缩进</h3><p>代码缩进是提高代码可读性很重要的一个方面，在使用C语言或者C++编程的时候建议严格规范自己的代码缩进</p><p>常见的代码缩进有如下几种</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//大括号另起一行</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>],n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        a[i]*=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//左大括号不换行另起一行,无空格</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>],n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        a[i]*=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//左大括号不换行另起一行，有空格</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>],n;<br>    <span class="hljs-comment">//区别就是多一个空格，不同公司会有相应代码规范</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>        cin&gt;&gt;a[i];<br>        a[i]*=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//对于自定义函数，结构体等也一样</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<span class="hljs-type">int</span> data;&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    data;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br></code></pre></td></tr></table></figure><p>重中之重就是 对于下一层的代码，一定要跟上一层写出区分，这样方便对于整个程序的结构进行把握</p><p>比较推荐大括号分行写，这样每一组括号都可以直接对齐。</p><p>另外对于一些比较长的句子，可以随手写个注释，会方便很多。</p><p>提高代码可读性，方便自己debug，也方便他人阅读你的代码，帮助你找bug。</p><h3 id="2函数返回值"><a class="markdownIt-Anchor" href="#2函数返回值"></a> 2.函数返回值</h3><p>任何一个函数（包括main函数）都应该随手写上返回值。</p><p>通常来说，int main()主函数的返回值为0，表示程序正常运行结束。</p><p>自定义函数对应形式写上返回值，void型也应写上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>！！对于较为苛刻的评测机，或特定比赛规则，main函数不写return 0是不予通过的。</p><h2 id="二-c语言转c"><a class="markdownIt-Anchor" href="#二-c语言转c"></a> 二、C语言转C++</h2><p>在算法竞赛中，c++更多的是使用STL，其余语法基本与C语言一致，比较推荐大家去看一下</p><p><a href="https://www.bilibili.com/video/BV1UE411j7Ti">https://www.bilibili.com/video/BV1UE411j7Ti</a></p><p>下面简单就C++的常用不同点做出解释</p><h3 id="1头文件"><a class="markdownIt-Anchor" href="#1头文件"></a> 1.头文件</h3><p>经常会看到一些代码开头有很长一段头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//c++输入输出流，相当于c语言写的stdio.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//函数头文件，会包含一些常用函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//对于c语言头文件的引用，例如，stdio.h就写成cstdio，把.h去掉，开头加个c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-comment">//cstring是c语言的string.h，跟c++的string不是同一个头文件，标准不一样</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-comment">//一些STL头(不完全，可以去自己学习STL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><p>最后介绍一个万能头</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++h.&gt;</span></span><br></code></pre></td></tr></table></figure><p>在bits/stdc++.h头文件中，封装了几乎所有常用的头文件，在一些先进oj（例如牛客网）上是可以直接使用的，只写一个头文件就相当于写了人家数十行头文件，这对于偷懒有很大的帮助，对于理解没有任何帮助。</p><p>建议大家初学的时候，先老实把要用的每个头文件都敲上，等到熟练了以后可以写写万能头偷懒。</p><p>vs系列软件都不支持万能头，需要自己下载万能头文件进行配置。</p><p>由于万能头中的头文件比较多，每加载一个头文件都需要时间，可能会因此导致超时~~~</p><h3 id="2命名空间"><a class="markdownIt-Anchor" href="#2命名空间"></a> 2.命名空间</h3><p>c++的很多东西为了防止歧义，就设置了命名空间。对于某个命名空间，一些输入的关键字就会被识别，比如在std命名空间下，有着常用的输入输出cin、cout，&lt;algorithm&gt;，&lt;vector&gt;等等。如果没有声明命名空间，那么程序编译的时候就识别不出关键字，就会报错。</p><p>使用命名空间有以下两种方式</p><p>1.一般接在头文件的下方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//一般接在头文件的下方</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>2.在用到的时候进行声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;要用   命名空间名::关键字   的形式&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3输入输出等"><a class="markdownIt-Anchor" href="#3输入输出等"></a> 3.输入输出等</h3><p>在输出的末尾等地方会经常看到endl，这其实就是end line，结束这一行的输出并换一行。他的作用有：1.换行，2.清空当前缓冲区</p><p>endl的效率比直接输出’\n’要低。</p><p>换行一般有以下几种写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>cout&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>在c语言中，我们学到输入用scanf，输出用printf。而在c++中给了一种更灵活的输入输出方式：cin和cout。一般读作C in和C out。cin和cout不需要用诸如%d,%f等方式进行标识，他会根据需要输出的类型自动识别，自动输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> b;<br>    <span class="hljs-type">float</span> c;<br>    <span class="hljs-type">double</span> d;<br>    <span class="hljs-type">char</span> e;<br>    <span class="hljs-type">char</span> f[<span class="hljs-number">10</span>];<br>    string g;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;f&gt;&gt;g;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;b&lt;&lt;endl;<br>    cout&lt;&lt;c&lt;&lt;endl;<br>    cout&lt;&lt;d&lt;&lt;endl;<br>    cout&lt;&lt;e&lt;&lt;endl;<br>    cout&lt;&lt;f&lt;&lt;endl;<br>    cout&lt;&lt;g&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，cin和cout要先把输入输出的东西写入缓冲区，在进行输出，导致了输入输出的效率很低。</p><p>TIP：读入效率</p><p>cin &lt; cin(关闭流同步) &lt; scanf &lt; read(快读) &lt; fread</p><p>字符串scanf(&quot;%s&quot;,s)，快于一个一个字符读入</p><p>这里关闭流同步可以自己去百度搜索一下是怎么一回事，还有cerr,clog等特殊输出</p><p>简单写一下关闭流同步优化的办法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_wtih_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一些大佬喜欢写成这样的形式,其实是一样的东西</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_wtih_stdio(false);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IOS<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-debug技巧"><a class="markdownIt-Anchor" href="#三-debug技巧"></a> 三、debug技巧</h2><p>对于代码错误我们一般分为以下两个情况</p><h3 id="1完全不能运行"><a class="markdownIt-Anchor" href="#1完全不能运行"></a> 1.完全不能运行</h3><p>对于完全不能运行的一个解决办法就是，在程序中加一行printf(“Hello world 1\n”)。如果说hello world1成功输出了，那说明程序到这里是没有问题的，继续往下找地方添加hello world 2.3.4…直到不能输出hello world的地方，对应去检查语法是否正确，数组是否越界，循环有没有死循环等等</p><h3 id="2能运行但是答案不对"><a class="markdownIt-Anchor" href="#2能运行但是答案不对"></a> 2.能运行但是答案不对</h3><p>能运行的情况，我们一般可以将特殊值输出进行调试，直接输出的方式在算法竞赛中效率通常会比编译器的debug模式要好一些，更加直观。比如我们要通过getchar()的方式读取一个地图等，在读取完成后，是否可以将已读入的地图原样输出？在读入数组以后，是否能将读入的数组原样输出？在排序以后，再输出一次数组，看看数组有没有成功被排序？以此类推，将你每一步操作完成后的产物都输出一遍，同时辅助以字。最后当程序正确后，将所有的调试部分注释掉就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>],n;<br>    cin&gt;&gt;n;<br>    <br>    <span class="hljs-comment">//调试，输出n</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;个数有&quot;</span>&lt;&lt;n&lt;&lt;<span class="hljs-string">&quot;个&quot;</span>&lt;&lt;endl;<br>    <br>    <span class="hljs-comment">//读入数组a</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;a[i];<br>    <br>    <span class="hljs-comment">//调试，输出原数组a</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;before&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-comment">//对a升序排序</span><br>    <span class="hljs-built_in">sort</span>(a,a+n);<br>    <br>    <span class="hljs-comment">//调试，输出新数组a</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;after&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-comment">//最后输出答案，数组a的最小值</span><br>    cout&lt;&lt;a[<span class="hljs-number">0</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3找人debug的技巧"><a class="markdownIt-Anchor" href="#3找人debug的技巧"></a> 3.找人debug的技巧</h3><p>爽快一点，贴题目，贴题目链接，贴代码截图，缩进规范，<a href="https://pasteme.cn/#/%E8%B4%B4%E4%BB%A3%E7%A0%81%E3%80%82%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0%E9%A2%98%E6%84%8F%EF%BC%8C%E8%87%AA%E5%B7%B1%E6%80%9D%E8%B7%AF%EF%BC%8C%E9%97%AE%E9%A2%98%E5%8F%AF%E8%83%BD%E6%89%80%E5%9C%A8%E3%80%82%E5%B0%BD%E9%87%8F%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8A%A0%E4%B8%8A%E6%B3%A8%E9%87%8A">https://pasteme.cn/#/贴代码。简单描述题意，自己思路，问题可能所在。尽量给自己的代码加上注释</a></p><h2 id="四-代码技巧"><a class="markdownIt-Anchor" href="#四-代码技巧"></a> 四、代码技巧</h2><h3 id="1排序"><a class="markdownIt-Anchor" href="#1排序"></a> 1.排序</h3><p>课内学习了冒泡排序，但是bubble-sort作为一种时间复杂度O(n2)的排序，效率很难满足算法竞赛的时间需求。所以希望大家去自学快速排序，归并排序两种排序，需要能熟练写出这两种排序。然后以后在写程序的时候，可以直接简单一些写sort。</p><p>下面简单说一些sort的用法</p><h4 id="对于普通的整型数组"><a class="markdownIt-Anchor" href="#对于普通的整型数组"></a> 对于普通的整型数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>],n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sorr</span>(a,a+n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-comment">//若只想排某一段或者下标从1开始</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sorr</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<span class="hljs-comment">//相当于一个左闭右开</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义排序方式"><a class="markdownIt-Anchor" href="#自定义排序方式"></a> 自定义排序方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> t1,t2;<br>&#125;t[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span><span class="hljs-comment">//结构体数组排序</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.t1==b.t1)<span class="hljs-comment">//第一关键字相同</span><br>        <span class="hljs-keyword">return</span> a.t2&gt;b.t2;<span class="hljs-comment">//第二关键字</span><br>    <span class="hljs-keyword">return</span> a.t1&gt;b.t1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_ez</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><span class="hljs-comment">//很简单的降序，升序就a&gt;b</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a&lt;b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//排结构体，下表规则同上，假设n个</span><br>    <span class="hljs-built_in">sort</span>(t,t+n,cmp);<br>    <span class="hljs-comment">//自定义排整形等数组,int s[10],n个</span><br>    <span class="hljs-built_in">sort</span>(s,s+n,cmp1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2格式输出"><a class="markdownIt-Anchor" href="#2格式输出"></a> 2.格式输出</h3><p>一般用printf控制，有个控制行位空格的办法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,i==n?<span class="hljs-string">&#x27;\n&#x27;</span>:<span class="hljs-string">&#x27; &#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="五-养成写博客-查博客的好习惯"><a class="markdownIt-Anchor" href="#五-养成写博客-查博客的好习惯"></a> 五、养成写博客、查博客的好习惯</h2><p>好的技术博客是可以在将来面试中加分的，写博客的时候也能锻炼自己的文本编辑能力，html页面美化能力等等。同时，能将一道题的核心考点讲出来并且讲明白，才算是会了这道题。</p><p>另外很多题网上都有现成的题解，写的很详细很详细，还包括了图解和相关拓展知识点和相关习题。要培养自己的信息整合能力，不要总等着被教学。</p><h2 id="再有再提散会"><a class="markdownIt-Anchor" href="#再有再提散会"></a> #再有再提，散会</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>长沙学院CCSU2022夏季校赛-题解</title>
    <link href="/2022/05/07/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2CCSU2022%E5%A4%8F%E5%AD%A3%E6%A0%A1%E8%B5%9B-%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/05/07/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2CCSU2022%E5%A4%8F%E5%AD%A3%E6%A0%A1%E8%B5%9B-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="a-小贪一手"><a class="markdownIt-Anchor" href="#a-小贪一手"></a> A. 小贪一手</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">n,x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>请问<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>范围内的最大正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">%</mi><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k\%x=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">%</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></p><h3 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h3><p>第一行一个正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>，表示有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>组数据</p><p>接下来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>行，每行三个正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">x,y,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，如题面所述</p><h3 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h3><p>对于每个测试案例，打印答案——最大的非负整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">0\le k\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k\mod x=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>。可以保证答案总是存在的。</p><h3 id="数据规模与约束"><a class="markdownIt-Anchor" href="#数据规模与约束"></a> 数据规模与约束</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1\le t\le5\times10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">2\le x\le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>y</mi><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">0\le y \lt x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">y\le n\le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><h3 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span> <span class="hljs-number">12345</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">8</span> <span class="hljs-number">54321</span><br><span class="hljs-symbol">499999993 </span><span class="hljs-number">9</span> <span class="hljs-number">1000000000</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">187</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span> <span class="hljs-number">999999999</span><br></code></pre></td></tr></table></figure><h3 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">12339</span><br><span class="hljs-number">0</span><br><span class="hljs-number">15</span><br><span class="hljs-number">54306</span><br><span class="hljs-number">999999995</span><br><span class="hljs-number">185</span><br><span class="hljs-number">999999998</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>本题来自于<a href="https://codeforces.com/contest/1374">Codeforces Round #653 (Div. 3)</a>A题，指路<a href="https://codeforces.com/contest/1374/problem/A">1374A</a></p><p>贪心，我们要使得  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k\mod x = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> ，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 最大。那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>t</mi><mo>∗</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k=t*x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> ,所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(k-y)\%x=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。我们令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mi>n</mi><mo>−</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">m=n-y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> ，题目就成了在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,m]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">]</span></span></span></span> 范围内找最大的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的倍数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>  的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>m</mi><mi>k</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{m}{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 倍，对它进行取整得到倍数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> ，然后输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∗</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">t*x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 即为答案。数据规模在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span> 范围内，所以使用int型即可，不用考虑数据溢出问题。</p><h3 id="std"><a class="markdownIt-Anchor" href="#std"></a> STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t,n,x,y;<br><span class="hljs-keyword">for</span>(cin&gt;&gt;t;t--;cout&lt;&lt;(n-y)/x*x+y&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>)<br>cin&gt;&gt;x&gt;&gt;y&gt;&gt;n;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-ab-problem-very-easy"><a class="markdownIt-Anchor" href="#b-ab-problem-very-easy"></a> B. A+B Problem (very easy)</h2><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>人之初，A+B。你需要对给定字符串计算出答案，并用英文的形式输出。具体操作见样例，题目输入字符串保证不会出现除了小写英文字母、加法符号‘+’、连词符’-'以外的任何符号。</p><h3 id="输入描述-2"><a class="markdownIt-Anchor" href="#输入描述-2"></a> 输入描述</h3><p>第一行一个整数T，表示数据的组数。</p><p>接下来每行一个字符串，表示需要进行计算的式子。</p><h3 id="输出描述-2"><a class="markdownIt-Anchor" href="#输出描述-2"></a> 输出描述</h3><p>T行，每行一个字符串表示计算得到的答案</p><h3 id="数据规模与约束-2"><a class="markdownIt-Anchor" href="#数据规模与约束-2"></a> 数据规模与约束</h3><p>T≤10，所有给定字符串长度不超过100，参与加法的数字最大不大于99</p><h3 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例输入</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">6</span><br><span class="hljs-literal">zero</span><br><span class="hljs-literal">one</span>+<span class="hljs-literal">two</span>+<span class="hljs-literal">three</span>+<span class="hljs-literal">four</span>+<span class="hljs-literal">five</span>+<span class="hljs-literal">six</span>+<span class="hljs-literal">seven</span>+<span class="hljs-literal">eight</span>+<span class="hljs-literal">nine</span>+<span class="hljs-literal">ten</span><br>eleven+twelve+thirteen+fourteen+fifteen+sixteen<br>seventeen+eighteen+nineteen<br>twenty+thirty+forty+fifty+sixty+seventy+eighty+ninety<br>ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+<span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> 样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>55<br>81<br>54<br>440<br>794<br></code></pre></td></tr></table></figure><h3 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zero</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">one</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">two</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">three</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">four</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">five</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">six</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">seven</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">eight</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">nine</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">ten</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">eleven</span> <span class="hljs-number">11</span><br><span class="hljs-attribute">twelve</span> <span class="hljs-number">12</span><br><span class="hljs-attribute">thirteen</span> <span class="hljs-number">13</span><br><span class="hljs-attribute">fourteen</span> <span class="hljs-number">14</span><br><span class="hljs-attribute">fifteen</span> <span class="hljs-number">15</span><br><span class="hljs-attribute">sixteen</span> <span class="hljs-number">16</span><br><span class="hljs-attribute">seventeen</span> <span class="hljs-number">17</span><br><span class="hljs-attribute">eighteen</span> <span class="hljs-number">18</span><br><span class="hljs-attribute">nineteen</span> <span class="hljs-number">19</span><br><span class="hljs-attribute">twenty</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">thirty</span> <span class="hljs-number">30</span><br><span class="hljs-attribute">forty</span> <span class="hljs-number">40</span><br><span class="hljs-attribute">fifty</span> <span class="hljs-number">50</span><br><span class="hljs-attribute">sixty</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">seventy</span> <span class="hljs-number">70</span><br><span class="hljs-attribute">eighty</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">ninety</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3><p>一个很简单的模拟题，考察了对STL_map的运用（当然别的形如字符串数组的东西也可以）。</p><p>出题人因为这道题被锐评了…，感谢eroengine同学提供idea。</p><p>我们使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>p</mi><mo>&lt;</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo separator="true">,</mo><mi>i</mi><mi>n</mi><mi>t</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">map&lt;string,int&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span> 来满足字符串和数字之间的键值对应，在处理输入输出字符串的时候，不难发现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span> 字符对于答案没有影响，作为连词符，它的作用与加法符号一样。所以我们直接计算每一个字符串所代表的数字和即可。</p><p>有人吐槽本题是码农题，可是这题可以把备注中的内容复制了用一个新的形式输出（自己另外写一个转换程序），然后把形如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>p</mi><mo stretchy="false">[</mo><mi>s</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">map[seventeen]=17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span> 的28行式子复制进本题的需要提交的代码中就行咯。或者可以选择用正则表达式、文本编辑器等工具实现替换，复制完了单词表题目就很简单了。记得输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">and</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span> 哦~</p><h3 id="std-2"><a class="markdownIt-Anchor" href="#std-2"></a> STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>mp[<span class="hljs-string">&quot;zero&quot;</span>]=<span class="hljs-number">0</span>;<br>mp[<span class="hljs-string">&quot;one&quot;</span>]=<span class="hljs-number">1</span>;<br>mp[<span class="hljs-string">&quot;two&quot;</span>]=<span class="hljs-number">2</span>;<br>mp[<span class="hljs-string">&quot;three&quot;</span>]=<span class="hljs-number">3</span>;<br>mp[<span class="hljs-string">&quot;four&quot;</span>]=<span class="hljs-number">4</span>;<br>mp[<span class="hljs-string">&quot;five&quot;</span>]=<span class="hljs-number">5</span>;<br>mp[<span class="hljs-string">&quot;six&quot;</span>]=<span class="hljs-number">6</span>;<br>mp[<span class="hljs-string">&quot;seven&quot;</span>]=<span class="hljs-number">7</span>;<br>mp[<span class="hljs-string">&quot;eight&quot;</span>]=<span class="hljs-number">8</span>;<br>mp[<span class="hljs-string">&quot;nine&quot;</span>]=<span class="hljs-number">9</span>;<br>mp[<span class="hljs-string">&quot;ten&quot;</span>]=<span class="hljs-number">10</span>;<br>mp[<span class="hljs-string">&quot;eleven&quot;</span>]=<span class="hljs-number">11</span>;<br>mp[<span class="hljs-string">&quot;twelve&quot;</span>]=<span class="hljs-number">12</span>;<br>mp[<span class="hljs-string">&quot;thirteen&quot;</span>]=<span class="hljs-number">13</span>;<br>mp[<span class="hljs-string">&quot;fourteen&quot;</span>]=<span class="hljs-number">14</span>;<br>mp[<span class="hljs-string">&quot;fifteen&quot;</span>]=<span class="hljs-number">15</span>;<br>mp[<span class="hljs-string">&quot;sixteen&quot;</span>]=<span class="hljs-number">16</span>;<br>mp[<span class="hljs-string">&quot;seventeen&quot;</span>]=<span class="hljs-number">17</span>;<br>mp[<span class="hljs-string">&quot;eighteen&quot;</span>]=<span class="hljs-number">18</span>;<br>mp[<span class="hljs-string">&quot;nineteen&quot;</span>]=<span class="hljs-number">19</span>;<br>mp[<span class="hljs-string">&quot;twenty&quot;</span>]=<span class="hljs-number">20</span>;<br>mp[<span class="hljs-string">&quot;thirty&quot;</span>]=<span class="hljs-number">30</span>;<br>mp[<span class="hljs-string">&quot;forty&quot;</span>]=<span class="hljs-number">40</span>;<br>mp[<span class="hljs-string">&quot;fifty&quot;</span>]=<span class="hljs-number">50</span>;<br>mp[<span class="hljs-string">&quot;sixty&quot;</span>]=<span class="hljs-number">60</span>;<br>mp[<span class="hljs-string">&quot;seventy&quot;</span>]=<span class="hljs-number">70</span>;<br>mp[<span class="hljs-string">&quot;eighty&quot;</span>]=<span class="hljs-number">80</span>;<br>mp[<span class="hljs-string">&quot;ninety&quot;</span>]=<span class="hljs-number">90</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> t,ans;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br>string s,tmp=<span class="hljs-string">&quot;&quot;</span>;<br>cin&gt;&gt;s;<br>s+=<span class="hljs-string">&#x27;+&#x27;</span>;<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:s)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-string">&#x27;+&#x27;</span>||i==<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br>ans+=mp[tmp];<br>tmp=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>tmp+=i;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-签签签到"><a class="markdownIt-Anchor" href="#c-签签签到"></a> C. 签签签到</h2><h3 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h3><p>戴戴大师兄不小心把整套题的难度出高了，所以他打算放一个签到题。</p><p>签到题肯定不能弄得特别难，所以他决定让你输出一个<a href="https://pasteme.gxuca.team/1743">字符串</a>。</p><p>为了放松气氛，戴戴大师兄决定给大家看一点好玩的图，这张图和题目没有关系。</p><p><img src="https://uploadfiles.nowcoder.com/images/20220426/322212_1650968118981/AE61F053444D9D31264940EF73ECBAD8" alt="img" /><br />然后，你要做的就是点开<a href="https://pasteme.gxuca.team/1744">云剪切板链接</a>，然后把<a href="https://pasteme.gxuca.team/1744">字符串</a>输出。</p><p>提示：<a href="https://pasteme.gxuca.team/1744">云剪切板链接</a>和<a href="https://pasteme.gxuca.team/1744">字符串</a>的字样上都有超链接，把鼠标移到上面的话上就可以看到字变色了，就可以打开云剪切板了。</p><p>做题目一定要仔细哦~心急吃不了热豆腐</p><h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3><p>这题还蛮好玩的，出个这个活跃一下气氛，感谢沙烬同学提供idea。</p><p>本题的题面中共有5个超链接，在图片下方的4个都是假的超链接，点开后会是这么一句话</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>a</mi><mi>k</mi><mi>e</mi><mspace width="1em"/><mi>C</mi><mi>C</mi><mi>S</mi><mi>U</mi><mi mathvariant="normal">_</mi><mi>A</mi><mi>C</mi><mi>M</mi><mspace width="1em"/><mi>G</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>t</mi><mspace width="1em"/><mi>A</mi><mi>g</mi><mi>a</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Make \quad CCSU\_ACM \quad Great \quad Again</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span></span></p><p>这句话应该是每一个CCSU_ACMer共同的梦想。</p><p>但是很可惜，本题的答案不是这句话。图片上方有还有一个超链接，点开后是如下字样</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">%</mi><mi>d</mi><mi mathvariant="normal">%</mi><mtext mathvariant="monospace">\</mtext><mi>n</mi><mtext mathvariant="monospace">&quot;</mtext></mrow><annotation encoding="application/x-tex">\%d\%\verb|\|n\verb|&quot;|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.08333em;"></span><span class="mord">%</span><span class="mord mathdefault">d</span><span class="mord">%</span><span class="mord text"><span class="mord texttt">\</span></span><span class="mord mathdefault">n</span><span class="mord text"><span class="mord texttt">&quot;</span></span></span></span></span></span></p><p>你需要做的是在不转义的情况下输出一下字符串，使用R&quot;(STRING)&quot;可以实现字符串不转义输出。</p><p>PS：轻点喷，鼠标放在超链接上的时候可以看到下面四个都写了“别点”，最上面那个才有“这是正确答案”。不信你再去试一试！</p><h3 id="std-3"><a class="markdownIt-Anchor" href="#std-3"></a> STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">R&quot;(%d%\n&quot;)&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-alice-and-bob"><a class="markdownIt-Anchor" href="#d-alice-and-bob"></a> D. Alice and Bob</h2><h3 id="题目描述-4"><a class="markdownIt-Anchor" href="#题目描述-4"></a> 题目描述</h3><p>​    Alice 和 Bob 又在玩游戏，今天他们玩抽牌游戏。已知牌堆有共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 张牌，两个人轮流从桌面上抓牌，记每次抓牌前牌堆有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 张牌，则两人每一次至少取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 张牌，至多取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mi>s</mi><mn>2</mn></mfrac><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{s}{2}\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span>张牌。当一个人没有牌可以取时（即牌堆余量为0张牌时），他就输掉了游戏。对于给定的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 张牌来说，Bob 先取，<strong>请问Alice能否赢得游戏</strong>？能则输出 <strong>YES</strong> ，否则输出 <strong>NO</strong>。（假设 Alice 和 Bob 都足够聪明)</p><p>注：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>x</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil x\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">x</span><span class="mclose">⌉</span></span></span></span>表示不大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的最大整数，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mn>1</mn><mn>114514</mn></mfrac><mo stretchy="false">⌉</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil \frac{1}{114514}\rceil=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mord mtight">4</span><span class="mord mtight">5</span><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h3 id="输入描述-3"><a class="markdownIt-Anchor" href="#输入描述-3"></a> 输入描述</h3><p>第一行一个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> ，表示有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 组数据。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 行每行一个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 表示牌堆里牌的数量</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1≤t≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">1≤n≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h3 id="输出描述-3"><a class="markdownIt-Anchor" href="#输出描述-3"></a> 输出描述</h3><p>输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 行，每行一个英文大写字符串表示Alice的胜负状态。</p><h3 id="样例输入-3"><a class="markdownIt-Anchor" href="#样例输入-3"></a> 样例输入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a class="markdownIt-Anchor" href="#样例输出-3"></a> 样例输出</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>长沙学院“飞腾迈创杯”2022年新生赛</title>
    <link href="/2022/05/05/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E2%80%9C%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF%E2%80%9D2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
    <url>/2022/05/05/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E2%80%9C%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF%E2%80%9D2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="比赛链接"><a class="markdownIt-Anchor" href="#比赛链接"></a> 【比赛链接】</h2><p>比赛地址：<a href="https://www.nowcoder.com/acm/contest/34092">https://www.nowcoder.com/acm/contest/34092</a></p><p>邀请码：ccsu2022acm</p><h2 id="比赛信息"><a class="markdownIt-Anchor" href="#比赛信息"></a> 【比赛信息】</h2><p>比赛时间：5月7日13:30-17:30，共4小时</p><p>报名截止时间：5月6日14:00</p><p>主办单位：长沙学院计算机工程与应用数学学院</p><h2 id="比赛简介"><a class="markdownIt-Anchor" href="#比赛简介"></a> 【比赛简介】</h2><p>飞腾迈创（FT-Matrix）系列DSP是由国防科大计算机学院微电子所自主设计研发的高性能微处理器。经过十多年的发展，已经形成包括32位，64位，单核，多核，以及IP核在内的多条产品线，成功应用于包括超算，导航、网络处理等多个国家级关键平台上。目前，FT-Matrix DSP已经与湖南大学，中南大学，武汉大学，浙江大学，武汉理工、湖南科技大学以及军事科学院等多所国内高校和科研院所建立了生态合作伙伴关系，在共同探索飞腾迈创处理器更多应用场景的同时也培养了一大批熟悉处理器底层编程优化的软件人才，就职于国家级科研院所，以及诸如大疆、阿里、华为等知名企业中。当前，飞腾迈创应用生态在正以开放的姿态欢迎各位有志青年的加入，联系人王老师（13755137641）。</p><p>ACM国际大学生程序设计竞赛（全称：ACM International Collegiate Programming Contest，简称ACM-ICPC）是由美国计算机协会（ACM）主办，旨在展示当代大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过40多年的发展，ACM国际大学生程序设计竞赛已经发展成为全球最高规格、最具影响力的大学生程序设计竞赛。此次比赛基于ICPC竞赛模式，旨在培养选拔ICPC竞赛人才，在竞赛中表现优异的校内同学可加入我校ACM集训队开展训练，有机会代表我校参加ICPC国际大学生程序设计竞赛和CCPC中国大学生程序设计竞赛。</p><p>比赛共有9道题。每道题提交之后都有反馈，可以看到“通过”、“运行错误”、“答案错误”等结果。每道题都有多个测试点，只有通过所有测试点才算通过本题。每一次未通过的提交算20分钟罚时，单题得分记为通过该题时的比赛时间+该题罚时。比赛结束后按照学生的用时来排名，时间越短排名越前，时间相同则并列。</p><h2 id="组织机构"><a class="markdownIt-Anchor" href="#组织机构"></a> 【组织机构】</h2><p>主办：长沙学院计算机工程与应用数学学院</p><p>承办：CCSU ACM TEAM</p><p>赞助：飞腾迈创（FT-Matrix）</p><p>网络赛技术支持：牛客网（<a href="http://nowcoder.com">nowcoder.com</a>）</p><p>指导教师：黄娟</p><h2 id="参赛对象"><a class="markdownIt-Anchor" href="#参赛对象"></a> 【参赛对象】</h2><p>本次比赛主要面向长沙学院2021级ACM队员，同时也欢迎非竞赛队队员参赛，欢迎其他学校同学参赛交流。</p><h2 id="命题"><a class="markdownIt-Anchor" href="#命题"></a> 【命题】</h2><p>本次比赛采取部分原创+部分改编的命题方式，由CCSU2020ACM竞赛队队员担任命题工作。</p><h2 id="鸣谢"><a class="markdownIt-Anchor" href="#鸣谢"></a> 【鸣谢】</h2><p>特别感谢飞腾迈创（FT-Matrix）对本次比赛的大力支持。</p><p>感谢伙伴们的验题：<a href="https://ac.nowcoder.com/acm/contest/profile/807217677">式守さん</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/598662942"> LeiLeiKunLe</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/810308130"> Pedestrian1</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/767026510">C972937</a>，<a href="https://ac.nowcoder.com/profile/856779928?noredirect=true">猫猫是战旗小家伙</a> ，<a href="https://ac.nowcoder.com/acm/contest/profile/574103561">工口发动机</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/61174257"> 长路漫漫亦灿灿</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/999996626">L1ngYu</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/877350534">凌乱之风</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/876595926">Wayne_0v0</a>，<a href="https://ac.nowcoder.com/profile/563101042?noredirect=true">竹_yin</a> ，<a href="https://ac.nowcoder.com/profile/236063124?noredirect=true">沙烬</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>21-22-1蓝桥训练6</title>
    <link href="/2021/12/06/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%836%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2021/12/06/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%836%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="a-算法训练-5-2求指数"><a class="markdownIt-Anchor" href="#a-算法训练-5-2求指数"></a> A 算法训练 5-2求指数</h2><h3 id="资源限制"><a class="markdownIt-Anchor" href="#资源限制"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3><p>已知n和m，打印n<sup>1</sup>,n<sup>2</sup>，…，n<sup>m</sup>。要求用静态变量实现。n<sup>m</sup>表示n的m次方。已知n和m，打印n<sup>1</sup>，n<sup>2</sup>，…，n<sup>m</sup>。要求用静态变量实现。（每行显示5个数，每个数宽为12，右对齐）</p><h3 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h3><p>一个满足题目要求的输入范例。<br />例：<br />3 8</p><h3 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h3><p>与上面的样例输入对应的输出。<br />例：<br /><img src="http://lx.lanqiao.cn/RequireFile.do?fid=ngb56FND" alt="img" /></p><h3 id="数据规模和约定"><a class="markdownIt-Anchor" href="#数据规模和约定"></a> 数据规模和约定</h3><p>输入数据中每一个数的范围。<br />　　例：n<sup>m</sup>小于int的表示范围。</p><h3 id="题意思路"><a class="markdownIt-Anchor" href="#题意思路"></a> 题意思路</h3><p>​用t去记录目前的n<sup>x</sup>,每次输出完了以后t升一次。cnt记录输出了多少个数，每输出满5个换一行。</p><div style="page-break-after:always"></div><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,t=<span class="hljs-number">1</span>,cnt=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        t*=n;<br>        cnt++;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%12d &quot;</span>,t);<br>        <span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="b-算法提高-p1003"><a class="markdownIt-Anchor" href="#b-算法提高-p1003"></a> B 算法提高 P1003</h2><h3 id="资源限制-2"><a class="markdownIt-Anchor" href="#资源限制-2"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h3><p>作为一名网络警察，你的任务是监视电子邮件，看其中是否有一些敏感的关键词。不过，有些狡猾的犯罪嫌疑人会改变某些单词的字母顺序，以逃避检查。请编写一个程序，发现这种调整过顺序的关键词。程序的输入有两行，第一行是关键词列表，第二行是待检查的句子。程序的输出为在该句子中所找到的经过顺序调整的关键词。（单词全部为小写，单词之间以一个空格分隔，每一行的单词个数不限）</p><h3 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例<strong>输入</strong></h3><p>guns mines missiles<br />aameric ssell snug dan iimsssle ot sit neeemis</p><h3 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> <strong>样例输出</strong></h3><p>guns missiles</p><h3 id="题意思路-2"><a class="markdownIt-Anchor" href="#题意思路-2"></a> 题意思路</h3><p>​本题要读取所有的关键词，在电子邮件中寻找出现过的关键词。对于乱序单词的比较可以考虑用一个数组t[26]去记录每个单词出现的次数再一一比对，或者将单词按照字典序升序排列后比较。难点在于对整行带空格的字符串的读取，正常对于数组来说是可以输入的，但是换行符’\n’和空格’ '在输入时不便区分，则无法确定是输入到了关键词（第一行），还是电子邮件（第二行）。思考了一下，用getchar应该能做，但是比较麻烦就没有细写。我用到了C++的istringstream，可以在这篇博客学习一下 <a href="https://blog.csdn.net/qq_40806289/article/details/105064986">https://blog.csdn.net/qq_40806289/article/details/105064986</a></p><p>​由于题目没有给定数据规模，所以用了string和vector，sort函数可以对string按照字典序默认升序排序。</p><div style="page-break-after:always"></div><h3 id="ac代码-2"><a class="markdownIt-Anchor" href="#ac代码-2"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str1,str2;<br>    <span class="hljs-comment">//直接读取两个整行 </span><br>    <span class="hljs-built_in">getline</span>(cin,str1);<br>    <span class="hljs-built_in">getline</span>(cin,str2);<br>    vector&lt;string&gt;s1,s2,s3;<br>    <span class="hljs-comment">//c++ istringstream</span><br>    <span class="hljs-function">istringstream <span class="hljs-title">Str1</span><span class="hljs-params">(str1)</span>,<span class="hljs-title">Str2</span><span class="hljs-params">(str2)</span></span>;<br>    string tmp;<br>    <span class="hljs-keyword">while</span>(Str1&gt;&gt;tmp)<span class="hljs-comment">//读取关键词列表 </span><br>&#123;<br>        s1.<span class="hljs-built_in">push_back</span>(tmp);<span class="hljs-comment">//原单词 </span><br>        s2.<span class="hljs-built_in">push_back</span>(tmp);<span class="hljs-comment">//用来排序 </span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(Str2&gt;&gt;tmp)<span class="hljs-comment">//读取电子邮件 </span><br>        s3.<span class="hljs-built_in">push_back</span>(tmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s3.<span class="hljs-built_in">size</span>();i++) <br>        <span class="hljs-built_in">sort</span>(s3[i].<span class="hljs-built_in">begin</span>(),s3[i].<span class="hljs-built_in">end</span>());<span class="hljs-comment">//排序 </span><br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s2.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-built_in">sort</span>(s2[i].<span class="hljs-built_in">begin</span>(),s2[i].<span class="hljs-built_in">end</span>());<span class="hljs-comment">//将关键词排序 </span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s3.<span class="hljs-built_in">size</span>();j++)<span class="hljs-comment">//遍历电子邮件 </span><br>            <span class="hljs-keyword">if</span>(s3[j]==s2[i]) <br>                cout&lt;&lt;s1[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="c-算法提高-摆花"><a class="markdownIt-Anchor" href="#c-算法提高-摆花"></a> C 算法提高 摆花</h2><h3 id="资源限制-3"><a class="markdownIt-Anchor" href="#资源限制-3"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：128.0MB</p><h3 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h3><p>小明的花店新开张，为了吸引顾客，他想在花店的门口摆上一排花，共m盆。通过调查顾客的喜好，小明列出了顾客最喜欢的n种花，从1到n标号。为了在门口展出更多种花，规定第i种花不能超过ai盆，摆花时同一种花放在一起，且不同种类的花需按标号的从小到大的顺序依次摆列。<br />　　试编程计算，一共有多少种不同的摆花方案。</p><h3 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h3><p>第一行包含两个正整数n和m，中间用一个空格隔开。<br />　　第二行有n个整数，每两个整数之间用一个空格隔开，依次表示a1、a2、……an。</p><h3 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h3><p>输出只有一行，一个整数，表示有多少种方案。注意：因为方案数可能很多，请输出方案数对1000007取模的结果。</p><h3 id="样例输入-3"><a class="markdownIt-Anchor" href="#样例输入-3"></a> 样例输入</h3><p>2 4<br />3 2</p><h3 id="样例输出-3"><a class="markdownIt-Anchor" href="#样例输出-3"></a> 样例输出</h3><p>2</p><h3 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h3><p>有2种摆花的方案，分别是(1，1，1，2)， (1，1，2，2)。括号里的1和2表示两种花，比如第一个方案是前三个位置摆第一种花，第四个位置摆第二种花。</p><h3 id="数据规模和约定-2"><a class="markdownIt-Anchor" href="#数据规模和约定-2"></a> 数据规模和约定</h3><p>对于20%数据，有 0&lt;n≤8，0&lt;m≤8，0≤a<sub>i</sub>≤8；<br />　　对于50%数据，有0&lt;n≤20，0&lt;m≤20，0≤a<sub>i</sub>≤20；<br />　　对于100%数据，有0&lt;n≤100，0&lt;m≤100，0≤a<sub>i</sub>≤100。</p><h3 id="题意思路-3"><a class="markdownIt-Anchor" href="#题意思路-3"></a> 题意思路</h3><p>dp题，用一个二维数组dp[i][j]，i,j表示i种花摆j盆，dp[i][j]对应的值就是方法数。<br />dp[i][j]=dp[i][j]+dp[i-1][j-k]<br />k为第i种花摆放的盆数，所以前i-1种花有j-k盆，对前面能摆放的所有可能的方法数求和，即i种花摆放j盆的方法数。</p><div style="page-break-after:always"></div><h3 id="ac代码-3"><a class="markdownIt-Anchor" href="#ac代码-3"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[N][N],a[N],n,m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>cin&gt;&gt;a[i];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//摆0盆也是一种方案</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//种类</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)<span class="hljs-comment">//数量</span><br><span class="hljs-comment">//最多放a[i]盆，但是不一定还能放这么多 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-built_in">min</span>(a[i],j);k++)<br>dp[i][j]=(dp[i][j]+dp[i<span class="hljs-number">-1</span>][j-k])%<span class="hljs-number">1000007</span>;<br>cout&lt;&lt;dp[n][m]%<span class="hljs-number">1000007</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="d-算法提高-连接乘积"><a class="markdownIt-Anchor" href="#d-算法提高-连接乘积"></a> D 算法提高 连接乘积</h2><h3 id="资源限制-4"><a class="markdownIt-Anchor" href="#资源限制-4"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h3><p>192这个数很厉害，用它分别乘以1、2、3，会得到：<br />　　192 x 1 = 192<br />　　192 x 2 = 384<br />　　192 x 3 = 576<br />　　把这三个乘积连起来，得到192384576，正好是一个1~9的全排列<br />　　我们把上面的运算定义为连接乘积：<br />　　m x (1 … n) = k（其中m &gt; 0 且 n &gt; 1，对于上例，m = 192、n = 3、k = 192384576）<br />　　即k是把m分别乘以1到n的乘积连接起来得到的，则称k为m和n的连接乘积。<br />　　按字典序输出所有不同的连接乘积k，满足k是1~9的全排列</p><h3 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h3><p>每个k占一行</p><h3 id="样例输出-4"><a class="markdownIt-Anchor" href="#样例输出-4"></a> 样例输出</h3><p>显然，结果中应包含一行：<br />192384576</p><h3 id="题意思路-4"><a class="markdownIt-Anchor" href="#题意思路-4"></a> 题意思路</h3><p>实在读不懂题。</p><p>题目的意思应该是说，有个数m，m*1+…+m*n=k，k是一个1~9的全排列。然后把所有的k输出。暴力，从1-10000去尝试m，然后每多一项m*i，就检查一次当前的sum是否满足题意，如果满足的话添加进ans中。最后对ans进行排序输出。归类的话，应该算个模拟题吧…？</p><div style="page-break-after:always"></div><h3 id="ac代码-4"><a class="markdownIt-Anchor" href="#ac代码-4"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;string&gt; ans;<br>string s[]=&#123;<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>&#125;;<br><span class="hljs-function">string <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    string ans;<br>    <span class="hljs-keyword">while</span>(n)<br>&#123;<br>        ans=ans+s[n%<span class="hljs-number">10</span>];<br>        n/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)<br>vis[s[i]-<span class="hljs-string">&#x27;0&#x27;</span>]++;<br><span class="hljs-keyword">if</span>(vis[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)<br><span class="hljs-keyword">if</span>(vis[i]!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100000</span>;i++)<br>&#123;<br>        string str;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">10</span>;j++)<br>&#123;<br>            str=str+<span class="hljs-built_in">change</span>(i*j);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(str))<br>&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="e-算法提高-最长公共子序列"><a class="markdownIt-Anchor" href="#e-算法提高-最长公共子序列"></a> E 算法提高 最长公共子序列</h2><h3 id="资源限制-5"><a class="markdownIt-Anchor" href="#资源限制-5"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-5"><a class="markdownIt-Anchor" href="#问题描述-5"></a> 问题描述</h3><p>给定两个字符串，寻找这两个字串之间的最长公共子序列。</p><h3 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h3><p>输入两行，分别包含一个字符串，仅含有小写字母。</p><h3 id="输出格式-3"><a class="markdownIt-Anchor" href="#输出格式-3"></a> 输出格式</h3><p>最长公共子序列的长度。</p><h3 id="样例输入-4"><a class="markdownIt-Anchor" href="#样例输入-4"></a> 样例输入</h3><p>abcdgh<br />aedfhb</p><h3 id="样例输出-5"><a class="markdownIt-Anchor" href="#样例输出-5"></a> 样例输出</h3><p>3</p><h3 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h3><p>最长公共子序列为a，d，h。</p><h3 id="数据规模和约定-3"><a class="markdownIt-Anchor" href="#数据规模和约定-3"></a> 数据规模和约定</h3><p>字串长度1~1000。</p><h3 id="题意思路-5"><a class="markdownIt-Anchor" href="#题意思路-5"></a> 题意思路</h3><p>​LCS板子题，字符串的做法和整数一样做。</p><div style="page-break-after:always"></div><h3 id="ac代码-5"><a class="markdownIt-Anchor" href="#ac代码-5"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LCS</span><span class="hljs-params">(string s1,string s2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n=s1.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> m=s2.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> c[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||j==<span class="hljs-number">0</span>)<br>c[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s1[i<span class="hljs-number">-1</span>]==s2[j<span class="hljs-number">-1</span>])<br>c[i][j]=c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>c[i][j]=<span class="hljs-built_in">max</span>(c[i<span class="hljs-number">-1</span>][j],c[i][j<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c[n][m];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1,s2;<br>cin&gt;&gt;s1&gt;&gt;s2;<br>cout&lt;&lt;<span class="hljs-built_in">LCS</span>(s1,s2)&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="f-算法训练-和为零"><a class="markdownIt-Anchor" href="#f-算法训练-和为零"></a> F 算法训练 和为零</h2><h3 id="资源限制-6"><a class="markdownIt-Anchor" href="#资源限制-6"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-6"><a class="markdownIt-Anchor" href="#问题描述-6"></a> 问题描述</h3><p>请考虑一个由 1 到 N （ N=3, 4, 5 … 9 ）的数字组成的递增数列：1 2 3 … N。现在请在数列中插入“+”表示加，或者“-”表示减，抑或是“ ”表示空白，来将每一对数字组合在一起（请不在第一个数字前插入符号）。计算该表达式的结果并注意你是否得到了和为零。</p><p>请你写一个程序找出所有产生和为零的长度为N的数列。</p><h3 id="输入格式-3"><a class="markdownIt-Anchor" href="#输入格式-3"></a> 输入格式</h3><p>单独的一行表示整数N (3 &lt;= N &lt;= 9)。</p><h3 id="输出格式-4"><a class="markdownIt-Anchor" href="#输出格式-4"></a> 输出格式</h3><p>按照ASCII码的顺序，输出所有在每对数字间插入“+”, “-”, 或 “ ”后能得到和为零的数列。(注意:就算两个数字之间没有插入符号也应该保留空格)</p><h3 id="样例输入-5"><a class="markdownIt-Anchor" href="#样例输入-5"></a> 样例输入</h3><p>7</p><h3 id="样例输出-6"><a class="markdownIt-Anchor" href="#样例输出-6"></a> 样例输出</h3><p>1+2-3+4-5-6+7<br />1+2-3-4+5+6-7<br />1-2 3+4+5+6+7<br />1-2 3-4 5+6 7<br />1-2+3+4-5+6-7<br />1-2-3-4-5+6+7</p><h3 id="题意思路-6"><a class="markdownIt-Anchor" href="#题意思路-6"></a> 题意思路</h3><p>一眼看出dfs，激情写了30分钟还是错…玉神加了一行秒了…但是不理解为什么加这行才能对？我觉得不应该加。等一个巨佬解释一下。</p><p>难点在于存要输出的东西。考虑到连续空格的情况，需要开sum和num两个数来维护当前值。sum用来存和，num特别用于连续空格，当出现空格时，num*=10，num+=k。在连续空格结束后，sum+=num，num=0。代码细节要多注意。</p><div style="page-break-after:always"></div><h3 id="ac代码-6"><a class="markdownIt-Anchor" href="#ac代码-6"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">k当前数</span><br><span class="hljs-comment">sum 总和</span><br><span class="hljs-comment">num 空格（没加进sum的数）</span><br><span class="hljs-comment">s要输出的式子</span><br><span class="hljs-comment">fnum的符号</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> num,string s,<span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>num++;<span class="hljs-comment">//玉神の神之一手</span><br><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;1&#x27;</span>+k<span class="hljs-number">-1</span>;<br>s=s+ch;<br><span class="hljs-keyword">if</span>(k==n)<br>&#123;<br><span class="hljs-keyword">if</span>(sum+f*num==<span class="hljs-number">0</span>)<br>cout&lt;&lt;s&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,num*<span class="hljs-number">10</span>+k,s+<span class="hljs-string">&#x27; &#x27;</span>,f);<br>sum=sum+f*num;<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,k,s+<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,k,s+<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>21-22-1蓝桥训练5 题解</title>
    <link href="/2021/12/05/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%835%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2021/12/05/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%835%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="a-算法训练-乘积最大"><a class="markdownIt-Anchor" href="#a-算法训练-乘积最大"></a> A 算法训练 乘积最大</h2><h3 id="资源限制"><a class="markdownIt-Anchor" href="#资源限制"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> <strong>问题描述</strong></h3><p>今年是国际数学联盟确定的“2000——世界数学年”，又恰逢我国著名数学家华罗庚先生诞辰90周年。在华罗庚先生的家乡江苏金坛，组织了一场别开生面的数学智力竞赛的活动，你的一个好朋友XZ也有幸得以参加。活动中，主持人给所有参加活动的选手出了这样一道题目：</p><p>设有一个长度为N的数字串，要求选手使用K个乘号将它分成K+1个部分，找出一种分法，使得这K+1个部分的乘积能够为最大。</p><p>同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：</p><p>有一个数字串：312， 当N=3，K=1时会有以下两种分法：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>∗</mo><mn>12</mn><mo>=</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">3*12=12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>31</mn><mo>∗</mo><mn>2</mn><mo>=</mo><mn>62</mn></mrow><annotation encoding="application/x-tex">31*2=62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span></span></p><p>这时，符合题目要求的结果是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>31</mn><mo>∗</mo><mn>2</mn><mo>=</mo><mn>62</mn></mrow><annotation encoding="application/x-tex">31*2=62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span></span></p><p>现在，请你帮助你的好朋友XZ设计一个程序，求得正确的答案。</p><h3 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> <strong>输入格式</strong></h3><p>第一行共有2个自然数N，K（6≤N≤40，1≤K≤6）<br />　　第二行是一个长度为N的数字串。</p><h3 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> <strong>输出格式</strong></h3><p>输出所求得的最大乘积（一个自然数）。</p><h3 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> <strong>样例输入</strong></h3><p>4 2<br />1231</p><h3 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> <strong>样例输出</strong></h3><p>62</p><h3 id="思路解析"><a class="markdownIt-Anchor" href="#思路解析"></a> <strong>思路解析</strong></h3><p>​这题我用dp写的，有聚聚说爆搜也能过，没试过。</p><p>​用dp数组存储当前状态，dp[i][j]表示长度为i+1的字符串填入j个乘号所得的最大值。</p><p>​当j==0时，所求得的数就是给出的字符串。</p><p>​长度为i的字符串填入j个乘号所得值 等于 长度为p的字符串（p小于i）填入j-1个乘号所得值 乘以 p+1到i的字符串代表的数。自定义函数ll f(int u,int v)的作用是将a[u]~a[v]的这一部分元素转换成整数。</p><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> <strong>AC代码</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> n,k,a[<span class="hljs-number">50</span>];<br>ll dp[<span class="hljs-number">50</span>][<span class="hljs-number">10</span>],ret;<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>ret=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=u;i&lt;=v;i++)<br>&#123;<br>ret*=<span class="hljs-number">10</span>;<br>ret+=a[i];<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;ch;<br>a[i]=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>,i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;i;p++)<br>dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[p][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">f</span>(p+<span class="hljs-number">1</span>,i));<br>cout&lt;&lt;dp[n<span class="hljs-number">-1</span>][k]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="b-算法提高-金陵十三钗"><a class="markdownIt-Anchor" href="#b-算法提高-金陵十三钗"></a> B 算法提高 金陵十三钗</h2><h3 id="资源限制-2"><a class="markdownIt-Anchor" href="#资源限制-2"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h3><p>在电影《金陵十三钗》中有十二个秦淮河的女人要自我牺牲代替十二个女学生去赴日本人的死亡宴会。为了不让日本人发现，自然需要一番乔装打扮。但由于天生材质的原因，每个人和每个人之间的相似度是不同的。由于我们这是编程题，因此情况就变成了金陵n钗。给出n个女人和n个学生的相似度矩阵，求她们之间的匹配所能获得的最大相似度。<br />　　所谓相似度矩阵是一个n*n的二维数组like[i][j]。其中i,j分别为女人的编号和学生的编号，皆从0到n-1编号。like[i][j]是一个0到100的整数值，表示第i个女人和第j个学生的相似度，值越大相似度越大，比如0表示完全不相似，100表示百分之百一样。每个女人都需要找一个自己代替的女学生。<br />　　最终要使两边一一配对，形成一个匹配。请编程找到一种匹配方案，使各对女人和女学生之间的相似度之和最大。</p><h3 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h3><p>第一行一个正整数n表示有n个秦淮河女人和n个女学生<br />　　接下来n行给出相似度，每行n个0到100的整数，依次对应二维矩阵的n行n列。</p><h3 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h3><p>仅一行，一个整数，表示可获得的最大相似度。</p><h3 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例输入</h3><p>4<br />97 91 68 14<br />8 33 27 92<br />36 32 98 53<br />73 7 17 82</p><h3 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> 样例输出</h3><p>354</p><h3 id="数据规模和约定"><a class="markdownIt-Anchor" href="#数据规模和约定"></a> 数据规模和约定</h3><p>对于70%的数据，n&lt;=10<br />　　对于100%的数据，n&lt;=13</p><h3 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h3><p>最大相似度为91+92+93+73=354</p><h3 id="思路解析-2"><a class="markdownIt-Anchor" href="#思路解析-2"></a> 思路解析</h3><p>状压dp题，最开始用dfs写，最后3个样例t了。可以考虑记忆化dfs或者dp</p><p>因为最多只有13个学生，每个学生用一位二进制表示，可以压缩成一个整数<br />例如1010 （大-&gt;小） 可以表示配对了第二个第四个学生<br />将学生的下标从0开始计数比较方便，这样1&lt;&lt; i就代表第i个学生了。<br />可以根据配对了几个学生选择第几个女人来配对，这样就能降一维了。<br />例如：1010配对了两个学生，可以由第一个女人和第二个学生配对转移过来，也可以由第一个女人和第四个学生转移过来</p><h3 id="ac代码-2"><a class="markdownIt-Anchor" href="#ac代码-2"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,t,tmp,a[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>],dp[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>cin&gt;&gt;a[i][j];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)<br>    &#123;<br>        tmp=i,t=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(tmp) <br>        &#123;<br>            t++;<br>            tmp-=tmp&amp;-tmp;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j))<br>                dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[i^(<span class="hljs-number">1</span>&lt;&lt;j)]+a[t][j]);<br>    &#125;<br>    cout&lt;&lt;dp[(<span class="hljs-number">1</span>&lt;&lt;n)<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="c-算法提高-上帝造题五分钟"><a class="markdownIt-Anchor" href="#c-算法提高-上帝造题五分钟"></a> C 算法提高 上帝造题五分钟</h2><h3 id="资源限制-3"><a class="markdownIt-Anchor" href="#资源限制-3"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h3><p>第一分钟，上帝说：要有题。于是就有了L，Y，M，C<br />　　第二分钟，LYC说：要有向量。于是就有了长度为n写满随机整数的向量<br />　　第三分钟，YUHCH说：要有查询。于是就有了Q个查询，查询向量的一段区间内元素的最小值<br />　　第四分钟，MZC说：要有限。于是就有了数据范围<br />　　第五分钟，CS说：要有做题的。说完众神一哄而散，留你来收拾此题</p><h3 id="输入格式-3"><a class="markdownIt-Anchor" href="#输入格式-3"></a> 输入格式</h3><p>第一行两个正整数n和Q，表示向量长度和查询个数<br />　　接下来一行n个整数，依次对应向量中元素：a[0]，a[1]，…，a[n-1]<br />　　接下来Q行，每行两个正整数lo，hi，表示查询区间[lo, hi]中的最小值，即min(a[lo],a[lo+1],…,a[hi])。</p><h3 id="输出格式-3"><a class="markdownIt-Anchor" href="#输出格式-3"></a> 输出格式</h3><p>共Q行，依次对应每个查询的结果，即向量在对应查询区间中的最小值。</p><h3 id="样例输入-3"><a class="markdownIt-Anchor" href="#样例输入-3"></a> 样例输入</h3><p>7 4<br />1 -1 -4 8 1 2 -7<br />0 0<br />1 3<br />4 5<br />0 6</p><h3 id="样例输出-3"><a class="markdownIt-Anchor" href="#样例输出-3"></a> 样例输出</h3><p>1<br />-4<br />1<br />-7</p><h3 id="样例说明-2"><a class="markdownIt-Anchor" href="#样例说明-2"></a> 样例说明</h3><p>第一个查询[0,0]表示求min{a[0]}=min{1}=1<br />　　第二个查询[1,3]表示求min{a[1],a[2],a[3]}=min{-1,-4,8}=-4<br />　　第三个查询[4,5]表示求min{a[4],a[5]}=min{1,2}=1<br />　　第四个查询[0,6]表示查询整个向量，求min{a[0…6]}=min{1,-1,-4,8,1,2,-7}=-7</p><h3 id="数据规模和约定-2"><a class="markdownIt-Anchor" href="#数据规模和约定-2"></a> 数据规模和约定</h3><p>1&lt;=n&lt;=1984，1&lt;=Q&lt;=1988，向量中随机整数的绝对值不超过1,000</p><h3 id="思路解析-3"><a class="markdownIt-Anchor" href="#思路解析-3"></a> 思路解析</h3><p>​数据规模太小了，直接暴力就过了。对于每一组输入的lo和hi，遍历a[lo]~a[hi]中的所有元素，取得最小的元素。</p><p>​当数据规模大起来，并且要对元素进行修改的时候，就要涉及到一种高级数据结构——线段树。这里不做提及，毕竟杀鸡不用牛刀。</p><h3 id="ac代码-3"><a class="markdownIt-Anchor" href="#ac代码-3"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,lo,hi,ans,a[<span class="hljs-number">2000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>cin&gt;&gt;a[i];<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;lo&gt;&gt;hi;<br>ans=<span class="hljs-number">2005</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=lo;i&lt;=hi;i++)<br>ans=<span class="hljs-built_in">min</span>(ans,a[i]);<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="d-算法训练-c-calculations"><a class="markdownIt-Anchor" href="#d-算法训练-c-calculations"></a> D 算法训练 C*++ Calculations</h2><h3 id="资源限制-4"><a class="markdownIt-Anchor" href="#资源限制-4"></a> 资源限制</h3><p>​时间限制：2.0s  内存限制：64.0MB</p><h3 id="问题描述-4"><a class="markdownIt-Anchor" href="#问题描述-4"></a> 问题描述</h3><p>C*<ins>语言和C</ins>语言非常相似，然而C*<ins>的程序有时会出现意想不到的结果。比如像这样的算术表达式：<br />　　表达式=基本式 / 表达式+基本式 / 表达式-基本式<br />　　基本式=增量 / 系数*增量<br />　　增量=a</ins> / <ins>a<br />　　系数=0/1/2/……/1000<br />　　如“5*a</ins>-3*<ins>a+a</ins>”是合法的C*<ins>表达式。<br />　　计算这样的表达式的值的方法：首先是每个基本式进行计算，然后按照正常的算术运算法则计算。如果一个基本式包含“a</ins>”，则先进行乘法运算再使变量a权值+1；如果一个基本式包含“++a”，则先使变量a权值+1再进行乘法运算。<br />　　然而基本式可以按任意顺序计算，这就是为什么计算结果是完全无法预料的。<br />　　你的任务就是去找到最大的可能结果。</p><p>第一行，一个整数n，表示变量a的初始值</p><p>​第二行，一个合法的C*++表达式。</p><p>​共一行，一个整数ans，表示最大可能结果。</p><h3 id="输入格式-4"><a class="markdownIt-Anchor" href="#输入格式-4"></a> 输入格式</h3><p>input 1:<br />　　1<br />　　5*a+±3*<ins>a+a</ins><br />　　input 2:<br />　　3<br />　　a+++++a</p><h3 id="输出格式-4"><a class="markdownIt-Anchor" href="#输出格式-4"></a> 输出格式</h3><p>output 1:<br />　　11<br />　　output 2:<br />　　8</p><h3 id="数据规模和约定-3"><a class="markdownIt-Anchor" href="#数据规模和约定-3"></a> 数据规模和约定</h3><p>对于20%的数据，表达式长度&lt;=20。<br />　　另有20%的数据，满足n&gt;=0。<br />　　对于100%的数据，-1000&lt;=n&lt;=1000，表达式长度&lt;=10000。<br />　　注意表达式开头可能有负号！</p><h3 id="思路解析-4"><a class="markdownIt-Anchor" href="#思路解析-4"></a> 思路解析</h3><p>​模拟，增量表达式只有a<ins>和</ins>a两种，将所有的系数提出来排序，从小到大进行模拟运算即可。注意，++a要先给变量a变大，后进行乘法运算。</p><p>​ps：Codeforces Problemset 39A~</p><h3 id="ac代码-4"><a class="markdownIt-Anchor" href="#ac代码-4"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> flag;<br><span class="hljs-type">int</span> a,n,k,r,ans;<br><span class="hljs-type">int</span> w[<span class="hljs-number">10011</span>],tmp;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100011</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n%s&quot;</span>,&amp;a,s+<span class="hljs-number">1</span>);<br>n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(s[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&gt;<span class="hljs-number">1</span>;i--)<br>s[i]=s[i<span class="hljs-number">-1</span>];<br>s[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;+&#x27;</span>;<br>n++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i+=<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (s[i++]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>k=<span class="hljs-number">-1</span>;<br>r=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;=n&amp;&amp;<span class="hljs-string">&#x27;0&#x27;</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>(r*=<span class="hljs-number">10</span>)+=s[i++]<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">if</span> (s[i]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>i++;<br><span class="hljs-keyword">else</span><br>r=<span class="hljs-number">1</span>;<br>w[++tmp]=(k*=r);<br>ans+=(a-(s[i]==<span class="hljs-string">&#x27;a&#x27;</span>))*k;<br>&#125;<br><span class="hljs-built_in">sort</span>(w+<span class="hljs-number">1</span>,w+tmp+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=tmp;i++)<br>ans+=i*w[i];<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="e-算法训练-特殊的数字四十"><a class="markdownIt-Anchor" href="#e-算法训练-特殊的数字四十"></a> E 算法训练 特殊的数字四十</h2><h3 id="资源限制-5"><a class="markdownIt-Anchor" href="#资源限制-5"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-5"><a class="markdownIt-Anchor" href="#问题描述-5"></a> 问题描述</h3><p>1234是一个非常特殊的四位数，因为它的各位数之和为10，编程求所有这样的四位十进制数。</p><h3 id="输出格式-5"><a class="markdownIt-Anchor" href="#输出格式-5"></a> 输出格式</h3><p>按从小到大的顺序输出满足条件的四位十进制数。每个数字占用一行。</p><h3 id="思路解析-5"><a class="markdownIt-Anchor" href="#思路解析-5"></a> 思路解析</h3><p>本题要求所有满足各位和为10的四位数，所以遍历所有的4位数，如果4位和为10则成立，输出。</p><p>另外可以按位去推，3层循环也可以推出来，这里不做展示。</p><h3 id="ac代码-5"><a class="markdownIt-Anchor" href="#ac代码-5"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmp,sum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1000</span>;i&lt;<span class="hljs-number">10000</span>;i++)<br>&#123;<br>tmp=i;<br>sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(tmp)<br>&#123;<br>sum+=tmp%<span class="hljs-number">10</span>;<br>tmp/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==<span class="hljs-number">10</span>)<br>cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="f-算法提高-五次方数"><a class="markdownIt-Anchor" href="#f-算法提高-五次方数"></a> F 算法提高 五次方数</h2><h3 id="资源限制-6"><a class="markdownIt-Anchor" href="#资源限制-6"></a> 资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-6"><a class="markdownIt-Anchor" href="#问题描述-6"></a> 问题描述</h3><p>对一个数十进制表示时的每一位数字乘五次方再求和，会得到一个数的五次方数<br />　　例如：1024的五次方数为1+0+32+1024=1057<br />　　有这样一些神奇的数，它的五次方数就是它自己，而且这样的数竟然只有有限多个<br />　　从小到大输出所有这样的数</p><h3 id="输出格式-6"><a class="markdownIt-Anchor" href="#输出格式-6"></a> 输出格式</h3><p>每个数独立一行输出</p><h3 id="样例输出-4"><a class="markdownIt-Anchor" href="#样例输出-4"></a> 样例输出</h3><p>10<br />200<br />3000</p><h3 id="思路解析-6"><a class="markdownIt-Anchor" href="#思路解析-6"></a> 思路解析</h3><p>首先，我们知道9的五次方</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>9</mn><mn>5</mn></msup><mo>=</mo><mn>59</mn><mo separator="true">,</mo><mn>049</mn></mrow><annotation encoding="application/x-tex">9^5=59,049</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">9</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">4</span><span class="mord">9</span></span></span></span></span></p><p>设位数为n，由题意得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>≤</mo><msup><mn>9</mn><mn>5</mn></msup><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">10^n≤9^5*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.850362em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">9</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>每次逐渐增加位数n，推出 n最大为6</p><p>所以从0开始遍历到1e6+5即可得到所有的答案，但是本题答案错了，没有包含0和1这两项。</p><h3 id="ac代码-6"><a class="markdownIt-Anchor" href="#ac代码-6"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmp,k,sum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000005</span>;i++)<br>&#123;<br>tmp=i,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(tmp)<br>&#123;<br>k=tmp%<span class="hljs-number">10</span>;<br>sum+=<span class="hljs-built_in">pow</span>(k,<span class="hljs-number">5</span>);<br>tmp/=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(sum&gt;i)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==i)<br>cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 735 (Div. 2)</title>
    <link href="/2021/07/30/Codeforces%20Round%20#735%20(Div.%202)/"/>
    <url>/2021/07/30/Codeforces%20Round%20#735%20(Div.%202)/</url>
    
    <content type="html"><![CDATA[<p>补题去了</p><h2 id="a-cherry"><a class="markdownIt-Anchor" href="#a-cherry"></a> <strong>A. Cherry</strong></h2><p><em>time limit per test ：</em> 1 second</p><p>memory limit per test ： 256 megabytes</p><p>You are given nn integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,…,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> . Find the maximum value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max(a_l,a_{l+1},…,a{r})⋅\min(a_l,a_{l+1},…,a_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> over all pairs <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(l,r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> of integers for which <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mo>&lt;</mo><mi>r</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1≤l&lt;r≤n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>.</p><h3 id="input"><a class="markdownIt-Anchor" href="#input"></a> Input</h3><p>The first line contains a single integer <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>10000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t (1≤t≤10000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>  — the number of test cases.</p><p>The first line of each test case contains a single integer <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n (2≤n≤10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>The second line of each test case contains nn integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>a</mi><mi>i</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_1,a_2,…,a_n (1≤ai≤10^6)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>It is guaranteed that the sum of nn over all test cases doesn’t exceed 3⋅10^5.</p><h3 id="output"><a class="markdownIt-Anchor" href="#output"></a> Output</h3><p>For each test case, print a single integer  — the maximum possible value of the product from the statement.</p><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><h4 id="input-2"><a class="markdownIt-Anchor" href="#input-2"></a> input</h4><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">69</span><br><span class="hljs-number">6</span><br><span class="hljs-symbol">719313 </span><span class="hljs-number">273225</span> <span class="hljs-number">402638</span> <span class="hljs-number">473783</span> <span class="hljs-number">804745</span> <span class="hljs-number">323328</span><br></code></pre></td></tr></table></figure><h4 id="output-2"><a class="markdownIt-Anchor" href="#output-2"></a> Output</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">12</span><br><span class="hljs-number">6</span><br><span class="hljs-number">4761</span><br><span class="hljs-number">381274500335</span><br></code></pre></td></tr></table></figure><h3 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h3><p>Let f(l,r)=max(al,al+1,…,ar)⋅min(al,al+1,…,ar)f(l,r)=max(al,al+1,…,ar)⋅min(al,al+1,…,ar).</p><p>In the first test case,</p><ul><li>f(1,2)=max(a1,a2)⋅min(a1,a2)=max(2,4)⋅min(2,4)=4⋅2=8f(1,2)=max(a1,a2)⋅min(a1,a2)=max(2,4)⋅min(2,4)=4⋅2=8.</li><li>f(1,3)=max(a1,a2,a3)⋅min(a1,a2,a3)=max(2,4,3)⋅min(2,4,3)=4⋅2=8f(1,3)=max(a1,a2,a3)⋅min(a1,a2,a3)=max(2,4,3)⋅min(2,4,3)=4⋅2=8.</li><li>f(2,3)=max(a2,a3)⋅min(a2,a3)=max(4,3)⋅min(4,3)=4⋅3=12f(2,3)=max(a2,a3)⋅min(a2,a3)=max(4,3)⋅min(4,3)=4⋅3=12.</li></ul><p>So the maximum is f(2,3)=12f(2,3)=12.</p><p>In the second test case, the maximum is f(1,2)=f(1,3)=f(2,3)=6f(1,2)=f(1,3)=f(2,3)=6.</p><p>——————————————————————————</p><h3 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意：</h3><p>给定长度为n的序列，考虑所有的l，r满足1≤l&lt;r≤n：在区间a[l]<sub>a[r]中，计算h=max(a[l]</sub>a[r])*min(a[l]~a[r])。在所有的l和r组合中，找到h的最大值。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h3><p>最开始考虑用划窗去维护最大最小值，由贪心思想应该让max和min尽可能的大，即max为最大的数，min为次大的数。后来分析发现，对于a[ ]={ 1, 4, 6, 3, 2, 8 }这样的一组，无法做到max=8，min=6的情况。因为6和8之间还有3,2来阻止min变大。所以对于所有的l,r，仅取r=l+1时为最优解，即取两个相邻的数。在两个相邻的数中，可以保证max和min不被其他更大或更小的数干扰。</p><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现：</h3><p>找相邻的数乘积真的是签中签了，for一遍的事情。考虑到数据规模1≤ai≤10^6，记得开long long！</p><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> maxx,tmp,a[<span class="hljs-number">100005</span>];<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        maxx=<span class="hljs-number">0</span>;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            cin&gt;&gt;a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>        &#123;<br>            tmp=a[i]*a[i+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(tmp&gt;maxx)<br>                maxx=tmp;<br>        &#125;<br>        cout&lt;&lt;maxx&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-cobb"><a class="markdownIt-Anchor" href="#b-cobb"></a> <strong>B. Cobb</strong></h2><p>time limit per test ： 1 second</p><p>memory limit per test ： 256 megabytes</p><p>You are given n integers a1,a2,…,an and an integer k. Find the maximum value of i⋅j−k⋅(ai|aj)over all pairs (i,j) of integers with 1≤i&lt;j≤n. Here, | is the <a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E6%88%96/10993689?fr=aladdin">bitwise OR operator</a>.</p><h3 id="input-3"><a class="markdownIt-Anchor" href="#input-3"></a> Input</h3><p>The first line contains a single integer tt (1≤t≤10000)  — the number of test cases.</p><p>The first line of each test case contains two integers nn (2≤n≤10^5) and kk (1≤k≤min(n,100)).</p><p>The second line of each test case contains nn integers a1,a2,…,an (0≤ai≤n).</p><p>It is guaranteed that the sum of nn over all test cases doesn’t exceed 3⋅10^5.</p><h3 id="output-3"><a class="markdownIt-Anchor" href="#output-3"></a> Output</h3><p>For each test case, print a single integer  — the maximum possible value of i⋅j−k⋅(ai|aj).</p><h3 id="example-2"><a class="markdownIt-Anchor" href="#example-2"></a> Example</h3><h4 id="input-4"><a class="markdownIt-Anchor" href="#input-4"></a> input</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="output-4"><a class="markdownIt-Anchor" href="#output-4"></a> Output</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-1</span><br><span class="hljs-deletion">-4</span><br>3<br>12<br></code></pre></td></tr></table></figure><h3 id="note-2"><a class="markdownIt-Anchor" href="#note-2"></a> Note</h3><p>Let f(i,j)=i⋅j−k⋅(ai|aj).</p><p>In the first test case,</p><ul><li>f(1,2)=1⋅2−k⋅(a1|a2)=2−3⋅(1|1)=−1f(1,2)=1⋅2−k⋅(a1|a2)=2−3⋅(1|1)=−1.</li><li>f(1,3)=1⋅3−k⋅(a1|a3)=3−3⋅(1|3)=−6f(1,3)=1⋅3−k⋅(a1|a3)=3−3⋅(1|3)=−6.</li><li>f(2,3)=2⋅3−k⋅(a2|a3)=6−3⋅(1|3)=−3f(2,3)=2⋅3−k⋅(a2|a3)=6−3⋅(1|3)=−3.</li></ul><p>So the maximum is f(1,2)=−1.</p><p>In the fourth test case, the maximum is f(3,4)=12.</p><h2 id="c-mikasa"><a class="markdownIt-Anchor" href="#c-mikasa"></a> <strong>C. Mikasa</strong></h2><p>time limit per test ：1 second<br />memory limit per test ：256 megabytes<br />You are given two integers n and m. Find the MEX of the sequence n⊕0,n⊕1,…,n⊕m. Here, ⊕ is the bitwise XOR operator.</p><p>MEX of the sequence of non-negative integers is the smallest non-negative integer that doesn’t appear in this sequence. For example, MEX(0,1,2,4)=3, and MEX(1,2021)=0.</p><h3 id="input-5"><a class="markdownIt-Anchor" href="#input-5"></a> Input</h3><p>The first line contains a single integer t (1≤t≤30000) — the number of test cases.</p><p>The first and only line of each test case contains two integers n and m (0≤n,m≤109).</p><h3 id="output-5"><a class="markdownIt-Anchor" href="#output-5"></a> Output</h3><p>For each test case, print a single integer — the answer to the problem.</p><h3 id="example-3"><a class="markdownIt-Anchor" href="#example-3"></a> Example</h3><h4 id="input-6"><a class="markdownIt-Anchor" href="#input-6"></a> input</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">696</span><br><span class="hljs-symbol">123456 </span><span class="hljs-number">654321</span><br></code></pre></td></tr></table></figure><h4 id="output-6"><a class="markdownIt-Anchor" href="#output-6"></a> output</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>3<br>0<br>640<br>530866<br></code></pre></td></tr></table></figure><h3 id="note-3"><a class="markdownIt-Anchor" href="#note-3"></a> Note</h3><p>In the first test case, the sequence is 3⊕0,3⊕1,3⊕2,3⊕3,3⊕4,3⊕5, or 3,2,1,0,7,6. The smallest non-negative integer which isn’t present in the sequence i. e. the MEX of the sequence is 4.</p><p>In the second test case, the sequence is 4⊕0,4⊕1,4⊕2,4⊕3,4⊕4,4⊕5,4⊕6, or 4,5,6,7,0,1,2. The smallest non-negative integer which isn’t present in the sequence i. e. the MEX of the sequence is 3.</p><p>In the third test case, the sequence is 3⊕0,3⊕1,3⊕2, or 3,2,1. The smallest non-negative integer which isn’t present in the sequence i. e. the MEX of the sequence is 0.</p><h2 id="d-diane"><a class="markdownIt-Anchor" href="#d-diane"></a> <strong>D. Diane</strong></h2><p><em>time limit per test :</em> 1 second</p><p><em>memory limit per test :</em> 256 megabytes</p><p>You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in ss an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.</p><p>A string a is a substring of a string b if a can be obtained from bb by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.</p><h3 id="input-7"><a class="markdownIt-Anchor" href="#input-7"></a> Input</h3><p>The first line contains a single integer t (1≤t≤500) — the number of test cases.</p><p>The first line of each test case contains a single integer nn (1≤n≤105).</p><p>It is guaranteed that the sum of nn over all test cases doesn’t exceed 3⋅10^5.</p><h3 id="output-7"><a class="markdownIt-Anchor" href="#output-7"></a> Output</h3><p>For each test case, print a single line containing the string ss. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.</p><h3 id="example-4"><a class="markdownIt-Anchor" href="#example-4"></a> Example</h3><h4 id="input-8"><a class="markdownIt-Anchor" href="#input-8"></a> input</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>3<br>5<br>9<br>19<br></code></pre></td></tr></table></figure><h4 id="output-8"><a class="markdownIt-Anchor" href="#output-8"></a> output</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">abc<br><span class="hljs-keyword">diane</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bbcaabbba</span><br><span class="hljs-keyword"></span>youarethecutestuwuu<br></code></pre></td></tr></table></figure><h3 id="note-4"><a class="markdownIt-Anchor" href="#note-4"></a> Note</h3><p>In the first test case, each substring of “abc” occurs exactly once.</p><p>In the third test case, each substring of “bbcaabbba” occurs an odd number of times. In particular, “b” occurs 55 times, “a” and “bb” occur 3 times each, and each of the remaining substrings occurs exactly once.</p><h3 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意：</h3><p>给定序列s的长度n，构造一个可能的序列满足：s的任何子列在s中出现的次数为奇数次。</p><h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路：</h3><p>①举例：</p><p>对于长度为9的序列aaaaaaaaa，子序列a出现了9次，aa出现了8次，aaa出现了7次…aaaaaaaaa出现了9次。</p><p>而对于长度为8的序列aaaaaaaa，子序列a出现了8次，aa出现了7次，aaa出现了6次…aaaaaaaa出现了8次。</p><p>②观察：</p><p>由上两个例子，可得如下表格</p><p><img src="https://img2020.cnblogs.com/blog/2415569/202107/2415569-20210730010221121-929033517.png" alt="img" /></p><p>所以，按照子序列的奇偶性去看表格时，当子序列是奇/偶时，为使其次数认为奇数次，可以选择奇+偶来构造</p><p>③构造：</p><p>构造时，需要两串x来满足上面的推论，一串x为奇数个，另一串为偶数个。这样x的总个数是（2<em>k）+(2</em>k+1)个。</p><p>此时x的任意长度子串必满足出现次数为奇数，前后两串x满足-&gt;（前奇后偶，前偶后奇）</p><p>若n为偶数，则需要用1个x以外的字符将两串x分隔开（例如y）。</p><p>若n为奇数，则需要2个x以外的字符将两串x分隔开。同时，若选择了2个一样的字符，则又会出现不满足奇数个的情况。故只能选用两个不同的，非x的字符（例如y,z）</p><p>④一些细节：</p><p>由于上文构造时默认总长度n很大，但是不能遗漏了比如n<mark>1的情况，n</mark>1时只要1个任意字符串就可以。不加特判会按照奇数个的情况起码打印两个非x字符！</p><p>最后，上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;<span class="hljs-string">&quot;x&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>                cout&lt;&lt;<span class="hljs-string">&quot;x&quot;</span>;<br>            cout&lt;&lt;<span class="hljs-string">&quot;y&quot;</span>;<br>            <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>)<br>                cout&lt;&lt;<span class="hljs-string">&quot;z&quot;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>                cout&lt;&lt;<span class="hljs-string">&quot;x&quot;</span>;<br>            cout&lt;&lt;endl; <br>        &#125;        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-you"><a class="markdownIt-Anchor" href="#e-you"></a> <strong>E. You</strong></h2><p><em>time limit per test ：</em> 5 seconds</p><p>memory limit per test ： 256 megabytes</p><p>You are given a tree with nn nodes. As a reminder, a tree is a connected undirected graph without cycles.</p><p>Let a1,a2,…,an be a sequence of integers. Perform the following operation <strong>exactly</strong> n times:</p><ul><li>Select an unerased node uu. Assign au:= number of <strong>unerased</strong> nodes adjacent to u. Then, erase the node u along with all edges that have it as an endpoint.</li></ul><p>For each integer k from 1 to n, find the number, modulo 998244353 , of different sequences a1,a2,…,an that satisfy the following conditions:</p><ul><li>it is possible to obtain aa by performing the aforementioned operations exactly nn times in some order.</li><li>gcd(a1,a2,…,an)=kgcd⁡(a1,a2,…,an)=k. Here, gcdgcd means the greatest common divisor of the elements in a.</li></ul><h3 id="input-9"><a class="markdownIt-Anchor" href="#input-9"></a> Input</h3><p>The first line contains a single integer tt (1≤t≤10000)  — the number of test cases.</p><p>The first line of each test case contains a single integer n (2≤n≤10^5).</p><p>Each of the next n−1 lines contains two integers uu and vv (1≤u,v≤n) indicating there is an edge between vertices u and v. It is guaranteed that the given edges form a tree.</p><p>It is guaranteed that the sum of n over all test cases doesn’t exceed 3⋅10^5.</p><h3 id="output-9"><a class="markdownIt-Anchor" href="#output-9"></a> Output</h3><p>For each test case, print nn integers in a single line, where for each k from 1 to n, the k-th integer denotes the answer when gcdgcd equals to k.</p><h3 id="example-5"><a class="markdownIt-Anchor" href="#example-5"></a> Example</h3><h4 id="input-10"><a class="markdownIt-Anchor" href="#input-10"></a> input</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="output-10"><a class="markdownIt-Anchor" href="#output-10"></a> output</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="note-5"><a class="markdownIt-Anchor" href="#note-5"></a> Note</h3><p>In the first test case,</p><p><img src="https://espresso.codeforces.com/ea30edaf24bcf174de47be04738ec47ddcb84374.png" alt="img" /></p><ul><li>If we delete the nodes in order 1→2→31→2→3 or 1→3→21→3→2, then the obtained sequence will be a=[2,0,0]a=[2,0,0] which has gcdgcd equals to 22.</li><li>If we delete the nodes in order 2→1→32→1→3, then the obtained sequence will be a=[1,1,0]a=[1,1,0] which has gcdgcd equals to 11.</li><li>If we delete the nodes in order 3→1→23→1→2, then the obtained sequence will be a=[1,0,1]a=[1,0,1] which has gcdgcd equals to 11.</li><li>If we delete the nodes in order 2→3→12→3→1 or 3→2→13→2→1, then the obtained sequence will be a=[0,1,1]a=[0,1,1] which has gcdgcd equals to 11.</li></ul><p>Note that here we are counting the number of different sequences, not the number of different orders of deleting nodes.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用链表实现集合的交集并集差集运算</title>
    <link href="/2021/05/31/%E9%93%BE%E8%A1%A8%E5%85%A5%E9%97%A8/"/>
    <url>/2021/05/31/%E9%93%BE%E8%A1%A8%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>题目来自某NJU同学的程序设计基础作业</p><p>贴一下题目：<img src="https://img2020.cnblogs.com/blog/2415569/202105/2415569-20210531220838516-286187188.png" alt="img" /></p><p><img src="https://img2020.cnblogs.com/blog/2415569/202105/2415569-20210531222023467-207797017.png" alt="img" /></p><p>用链表建立两个整数集合A和B（从键盘键入集合的元素，以-1结束，集合中没有-1）。</p><p>分别编写三个函数计算这两个集合的。</p><p>a.交集</p><p>b.并集</p><p>c.差集A-B</p><p><strong>三个函数的计算结果为新的链表。</strong></p><p>输出这三个新链表。</p><h1 id="做题心得"><a class="markdownIt-Anchor" href="#做题心得"></a> 做题心得</h1><p>其实这道题用数组直接能秒杀掉，难度就在对于单链表的理解与应用。对指针和结构体有挺高的掌握要求。</p><p>之前没好好学链表，总觉得数组能解决的事用数组，数组解决不了的用STL(stl永远的神不接受反驳)</p><p>补了三天的链表，总算学得明白了一点，简单把题过了一下。没有用函数分段，其实分段一下很简单。</p><p>P.S肥肠感谢鸡哥龙神的鼎力相助！</p><p>直接po代码，有错误或者其他更好的思路也希望dalao们可以带带</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><span class="hljs-comment">//链表结构体 </span><br>&#123;<br>    <span class="hljs-type">int</span> data;<span class="hljs-comment">//数据域 </span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* next;<span class="hljs-comment">//指向下一个结构体的指针 </span><br>&#125;;<br><span class="hljs-function">node* <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span><span class="hljs-comment">//新建链表项（新结构体） </span></span><br><span class="hljs-function"></span>&#123;<br>    node* newNode = (node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(node));<span class="hljs-comment">//给这个结构体开空间 </span><br>    newNode-&gt;data = data;<span class="hljs-comment">//保存数据 </span><br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//指针为空 </span><br>    <span class="hljs-keyword">return</span> newNode;<span class="hljs-comment">//返回新建的结构体 </span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> *p,*q,*t,*h;<span class="hljs-comment">//定义几个临时变量，会用到 </span><br>    <span class="hljs-type">int</span> tmp;<br>    <br>    <span class="hljs-comment">//输入集合A </span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* head_a = <span class="hljs-built_in">create</span>(tmp);<span class="hljs-comment">//头节点 </span><br>    p = head_a;<span class="hljs-comment">//p是临时变量 </span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp) &amp;&amp; tmp != <span class="hljs-number">-1</span>)<span class="hljs-comment">//输入数字，且当tmp=-1的时候结束 </span><br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* a = <span class="hljs-built_in">create</span>(tmp);<span class="hljs-comment">//给链表A新建节点 </span><br>        p-&gt;next = a;<span class="hljs-comment">//上一个节点的指针指向现在这个 </span><br>        p = a;<span class="hljs-comment">//临时变量变成现在这个 </span><br>    &#125;<br>    <br>    <span class="hljs-comment">//输入集合A </span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* head_b = <span class="hljs-built_in">create</span>(tmp);<span class="hljs-comment">//头节点 </span><br>    p = head_b;<span class="hljs-comment">//p是临时变量 </span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp) &amp;&amp; tmp != <span class="hljs-number">-1</span>)<span class="hljs-comment">//输入数字，且当tmp=-1的时候结束</span><br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* b = <span class="hljs-built_in">create</span>(tmp);<span class="hljs-comment">//给链表A新建节点</span><br>        p-&gt;next = b;<span class="hljs-comment">//上一个节点的指针指向现在这个</span><br>        p = b;<span class="hljs-comment">//临时变量变成现在这个 </span><br>    &#125;<br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* head_jiao = <span class="hljs-built_in">create</span>(<span class="hljs-number">-1</span>);<span class="hljs-comment">//定义交集的头结点 </span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* head_bing = <span class="hljs-built_in">create</span>(<span class="hljs-number">-1</span>);<span class="hljs-comment">//定义并集的头结点 </span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* head_cha = <span class="hljs-built_in">create</span>(<span class="hljs-number">-1</span>);<span class="hljs-comment">//定义差集的头结点 </span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    交集思路：</span><br><span class="hljs-comment">    遍历A，对A的每个元素 ，都与B中的元素进行一一对比</span><br><span class="hljs-comment">    类似于for循环中的</span><br><span class="hljs-comment">    for(int i=0;i&lt;n;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        for(int j=0;j&lt;m;j++)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            比较a和b</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span> <br>     <br>    p=head_a;<span class="hljs-comment">//p是临时变量，从A的头开始 </span><br>    t=head_jiao;<span class="hljs-comment">//t是临时变量，用来存交集的链表 </span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//链表A非空 ，遍历A链表 </span><br>    &#123;<br>        <br>        q=head_b;<span class="hljs-comment">//q是临时变量 ，从B的头开始 </span><br>        <span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//链表B非空 ，遍历B链表 </span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(q-&gt;data==p-&gt;data)<span class="hljs-comment">//B元素=A元素 </span><br>            &#123;<br>                <span class="hljs-comment">//如果a和b中有相同元素，则存进交集链表中 </span><br>                <span class="hljs-comment">//以下操作与输入A,B集合同原理 </span><br>                <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* jiao = <span class="hljs-built_in">create</span>(p-&gt;data);<br>                t-&gt;next = jiao;<br>                t = jiao;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//因为找到了，所以break掉，去比较A的下一个元素 </span><br>            &#125;<br>            q=q-&gt;next;<span class="hljs-comment">//链表B的当前位置后移（q-&gt;next是下一个元素，让q=下一个元素 </span><br>        &#125;<br>        p=p-&gt;next;<span class="hljs-comment">//链表A的当前位置后移（p-&gt;next是下一个元素，让p=下一个元素 </span><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    输出交集</span><br><span class="hljs-comment">    因为head_jiao-&gt;data头节点的数据域中存的是-1（见上文定义交集头结点 </span><br><span class="hljs-comment">    故从head_jiao的下一个开始</span><br><span class="hljs-comment">    */</span><br>    t=head_jiao-&gt;next;<br>    <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历交集链表 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t-&gt;data);<span class="hljs-comment">//输出元素，记得加空格 </span><br>        t=t-&gt;next;<span class="hljs-comment">//后移 </span><br>    &#125;<br>    <span class="hljs-comment">//Attention:这个-1不应该被放在链表中 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<span class="hljs-comment">//最后的元素以-1结尾，记得加换行 </span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    并集思路：</span><br><span class="hljs-comment">    先复制A的所有元素在并集bing里面</span><br><span class="hljs-comment">    然后遍历B，将B的每一个元素都与bing中元素比较</span><br><span class="hljs-comment">    若比较到最后都不一样，则当前元素不在bing中</span><br><span class="hljs-comment">    将这个元素添加进bing的末尾 </span><br><span class="hljs-comment">    */</span><br>    <br>    p=head_a;<span class="hljs-comment">//p是临时变量，从A的头开始</span><br>    t=head_bing;<span class="hljs-comment">//t是临时变量，用来存并集的链表</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历链表A </span><br>    &#123;<br>        <span class="hljs-comment">//以下操作与输入A,B集合同理，使用链表A的数据 </span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* bing = <span class="hljs-built_in">create</span>(p-&gt;data);<br>        t-&gt;next = bing;<br>        t = bing;<br>        p=p-&gt;next;<span class="hljs-comment">//链表A的当前位置后移（p-&gt;next是下一个元素，让p=下一个元素 </span><br>    &#125;<br>    q=head_b;<span class="hljs-comment">//q是临时变量，从B的头开始 </span><br><br>    <span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历链表B</span><br>    &#123;<br>            h=head_bing;<span class="hljs-comment">//h是临时变量，读取并集的链表</span><br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//用flag来记录是否有相同元素 </span><br>        <span class="hljs-keyword">while</span>(h!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历并集</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(h-&gt;data==q-&gt;data)<span class="hljs-comment">//存在相同元素</span><br>            &#123; <br>                flag=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            h=h-&gt;next;<span class="hljs-comment">//后移</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)<span class="hljs-comment">//如果不存在相同元素</span><br>        &#123;<br>            <span class="hljs-comment">//以下操作与输入A,B集合同理，使用链表B的当前元素数据 </span><br>            <span class="hljs-comment">//t还是上面复制的时候定义的那个，继续相同操作 </span><br>            <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* bing = <span class="hljs-built_in">create</span>(q-&gt;data);<br>            t-&gt;next = bing;<br>            t = bing;<br>        &#125;<br>        q=q-&gt;next;<span class="hljs-comment">//后移 </span><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    输出并集</span><br><span class="hljs-comment">    因为head_bing-&gt;data头节点的数据域中存的是-1（见上文定义并集头结点 </span><br><span class="hljs-comment">    故从head_bing的下一个开始</span><br><span class="hljs-comment">    */</span> <br>    t=head_bing-&gt;next;<br>    <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历并集链表 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t-&gt;data);<span class="hljs-comment">//输出元素，记得加空格 </span><br>        t=t-&gt;next;<span class="hljs-comment">//后移 </span><br>    &#125;<br>    <span class="hljs-comment">//Attention:这个-1不应该被放在链表中 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<span class="hljs-comment">//最后的元素以-1结尾，记得加换行</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    差集思路：</span><br><span class="hljs-comment">    同并集，先复制链表A在链表cha里面</span><br><span class="hljs-comment">    再遍历链表bing，如果遇到元素在链表A中，则删除链表节点</span><br><span class="hljs-comment">    */</span><br>    p=head_a;<span class="hljs-comment">//p是临时变量，从A的头开始</span><br>    t=head_cha;<span class="hljs-comment">//t是临时变量，用来存差集的链表</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历链表A </span><br>    &#123;<br>        <span class="hljs-comment">//以下操作与输入A,B集合同理，使用链表A的数据 </span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>* cha = <span class="hljs-built_in">create</span>(p-&gt;data);<br>        t-&gt;next = cha;<br>        t = cha;<br>        p=p-&gt;next;<span class="hljs-comment">//链表A的当前位置后移（p-&gt;next是下一个元素，让p=下一个元素 </span><br>    &#125;<br><br>    q=head_jiao;<span class="hljs-comment">//q是临时变量，从jiao的头开始</span><br>    <span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历链表jiao </span><br>    &#123;<br>        h=head_cha;<span class="hljs-comment">//h是临时变量，从cha的第1个开始 </span><br>        t=head_cha-&gt;next;<span class="hljs-comment">//t是临时变量，从cha的第2个开始 </span><br>        <br>        <br>        <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历cha差集，寻找当前数，然后把它删了 </span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(t-&gt;data==q-&gt;data)<span class="hljs-comment">//如果相等，删除 </span><br>            &#123;<br>                h-&gt;next=t-&gt;next;<span class="hljs-comment">//跳过t指向下一个 </span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果没删除，后移 </span><br>            h=h-&gt;next;<br>            t=t-&gt;next;<br>        &#125;<br>        q=q-&gt;next;<span class="hljs-comment">//后移 </span><br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    输出差集</span><br><span class="hljs-comment">    因为head_cha-&gt;data头节点的数据域中存的是-1（见上文定义并集头结点 </span><br><span class="hljs-comment">    故从head_cha的下一个开始</span><br><span class="hljs-comment">    */</span> <br>    t=head_cha-&gt;next;<br>    <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//遍历差集链表 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t-&gt;data);<span class="hljs-comment">//输出元素，记得加空格 </span><br>        t=t-&gt;next;<span class="hljs-comment">//后移 </span><br>    &#125;<br>    <span class="hljs-comment">//Attention:这个-1不应该被放在链表中 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<span class="hljs-comment">//最后的元素以-1结尾，记得加换行</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
