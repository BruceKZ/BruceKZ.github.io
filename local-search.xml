<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/11/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%836%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/05/11/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%836%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: <span class="hljs-number">21</span>-<span class="hljs-number">22</span>-<span class="hljs-number">1</span>蓝桥训练<span class="hljs-number">6</span> 题解<br></code></pre></td></tr></table></figure><h1 id="21-22-1蓝桥训练6"><a href="#21-22-1蓝桥训练6" class="headerlink" title="21-22-1蓝桥训练6"></a>21-22-1蓝桥训练6</h1><h2 id="A-算法训练-5-2求指数"><a href="#A-算法训练-5-2求指数" class="headerlink" title="A 算法训练 5-2求指数"></a>A 算法训练 5-2求指数</h2><h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　已知n和m，打印n^1^,n^2^，…，n^m^。要求用静态变量实现。n^m^表示n的m次方。已知n和m，打印n^1^，n^2^，…，n^m^。要求用静态变量实现。（每行显示5个数，每个数宽为12，右对齐）</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>一个满足题目要求的输入范例。<br>例：<br>3 8</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>与上面的样例输入对应的输出。<br>例：<br><img src="http://lx.lanqiao.cn/RequireFile.do?fid=ngb56FND" alt="img"></p><h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　输入数据中每一个数的范围。<br>　　例：n^m^小于int的表示范围。</p><h3 id="题意思路"><a href="#题意思路" class="headerlink" title="题意思路"></a>题意思路</h3><p>​用t去记录目前的n^x^,每次输出完了以后t升一次。cnt记录输出了多少个数，每输出满5个换一行。</p><div style="page-break-after:always"></div><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,t=<span class="hljs-number">1</span>,cnt=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        t*=n;<br>        cnt++;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%12d &quot;</span>,t);<br>        <span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="B-算法提高-P1003"><a href="#B-算法提高-P1003" class="headerlink" title="B 算法提高 P1003"></a>B 算法提高 P1003</h2><h3 id="资源限制-1"><a href="#资源限制-1" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　作为一名网络警察，你的任务是监视电子邮件，看其中是否有一些敏感的关键词。不过，有些狡猾的犯罪嫌疑人会改变某些单词的字母顺序，以逃避检查。请编写一个程序，发现这种调整过顺序的关键词。程序的输入有两行，第一行是关键词列表，第二行是待检查的句子。程序的输出为在该句子中所找到的经过顺序调整的关键词。（单词全部为小写，单词之间以一个空格分隔，每一行的单词个数不限）</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例<strong>输入</strong></h3><p>guns mines missiles<br>aameric ssell snug dan iimsssle ot sit neeemis</p><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><p>guns missiles</p><h3 id="题意思路-1"><a href="#题意思路-1" class="headerlink" title="题意思路"></a>题意思路</h3><p>​本题要读取所有的关键词，在电子邮件中寻找出现过的关键词。对于乱序单词的比较可以考虑用一个数组t[26]去记录每个单词出现的次数再一一比对，或者将单词按照字典序升序排列后比较。难点在于对整行带空格的字符串的读取，正常对于数组来说是可以输入的，但是换行符’\n’和空格’ ‘在输入时不便区分，则无法确定是输入到了关键词（第一行），还是电子邮件（第二行）。思考了一下，用getchar应该能做，但是比较麻烦就没有细写。我用到了C++的istringstream，可以在这篇博客学习一下 <a href="https://blog.csdn.net/qq_40806289/article/details/105064986">https://blog.csdn.net/qq_40806289/article/details/105064986</a></p><p>​由于题目没有给定数据规模，所以用了string和vector，sort函数可以对string按照字典序默认升序排序。</p><div style="page-break-after:always"></div><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str1,str2;<br>    <span class="hljs-comment">//直接读取两个整行 </span><br>    <span class="hljs-built_in">getline</span>(cin,str1);<br>    <span class="hljs-built_in">getline</span>(cin,str2);<br>    vector&lt;string&gt;s1,s2,s3;<br>    <span class="hljs-comment">//c++ istringstream</span><br>    <span class="hljs-function">istringstream <span class="hljs-title">Str1</span><span class="hljs-params">(str1)</span>,<span class="hljs-title">Str2</span><span class="hljs-params">(str2)</span></span>;<br>    string tmp;<br>    <span class="hljs-keyword">while</span>(Str1&gt;&gt;tmp)<span class="hljs-comment">//读取关键词列表 </span><br>&#123;<br>        s1.<span class="hljs-built_in">push_back</span>(tmp);<span class="hljs-comment">//原单词 </span><br>        s2.<span class="hljs-built_in">push_back</span>(tmp);<span class="hljs-comment">//用来排序 </span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(Str2&gt;&gt;tmp)<span class="hljs-comment">//读取电子邮件 </span><br>        s3.<span class="hljs-built_in">push_back</span>(tmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s3.<span class="hljs-built_in">size</span>();i++) <br>        <span class="hljs-built_in">sort</span>(s3[i].<span class="hljs-built_in">begin</span>(),s3[i].<span class="hljs-built_in">end</span>());<span class="hljs-comment">//排序 </span><br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s2.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-built_in">sort</span>(s2[i].<span class="hljs-built_in">begin</span>(),s2[i].<span class="hljs-built_in">end</span>());<span class="hljs-comment">//将关键词排序 </span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s3.<span class="hljs-built_in">size</span>();j++)<span class="hljs-comment">//遍历电子邮件 </span><br>            <span class="hljs-keyword">if</span>(s3[j]==s2[i]) <br>                cout&lt;&lt;s1[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="C-算法提高-摆花"><a href="#C-算法提高-摆花" class="headerlink" title="C 算法提高 摆花"></a>C 算法提高 摆花</h2><h3 id="资源限制-2"><a href="#资源限制-2" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：128.0MB</p><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　小明的花店新开张，为了吸引顾客，他想在花店的门口摆上一排花，共m盆。通过调查顾客的喜好，小明列出了顾客最喜欢的n种花，从1到n标号。为了在门口展出更多种花，规定第i种花不能超过ai盆，摆花时同一种花放在一起，且不同种类的花需按标号的从小到大的顺序依次摆列。<br>　　试编程计算，一共有多少种不同的摆花方案。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　第一行包含两个正整数n和m，中间用一个空格隔开。<br>　　第二行有n个整数，每两个整数之间用一个空格隔开，依次表示a1、a2、……an。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　输出只有一行，一个整数，表示有多少种方案。注意：因为方案数可能很多，请输出方案数对1000007取模的结果。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><p>2 4<br>3 2</p><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><p>2</p><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>　　有2种摆花的方案，分别是(1，1，1，2)， (1，1，2，2)。括号里的1和2表示两种花，比如第一个方案是前三个位置摆第一种花，第四个位置摆第二种花。</p><h3 id="数据规模和约定-1"><a href="#数据规模和约定-1" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　对于20%数据，有 0&lt;n≤8，0&lt;m≤8，0≤a<del>i</del>≤8；<br>　　对于50%数据，有0&lt;n≤20，0&lt;m≤20，0≤a<del>i</del>≤20；<br>　　对于100%数据，有0&lt;n≤100，0&lt;m≤100，0≤a<del>i</del>≤100。</p><h3 id="题意思路-2"><a href="#题意思路-2" class="headerlink" title="题意思路"></a>题意思路</h3><p>dp题，用一个二维数组dp[i][j]，i,j表示i种花摆j盆，dp[i][j]对应的值就是方法数。<br>dp[i][j]&#x3D;dp[i][j]+dp[i-1][j-k]<br>k为第i种花摆放的盆数，所以前i-1种花有j-k盆，对前面能摆放的所有可能的方法数求和，即i种花摆放j盆的方法数。</p><div style="page-break-after:always"></div><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 105</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[N][N],a[N],n,m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>cin&gt;&gt;a[i];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//摆0盆也是一种方案</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//种类</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)<span class="hljs-comment">//数量</span><br><span class="hljs-comment">//最多放a[i]盆，但是不一定还能放这么多 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-built_in">min</span>(a[i],j);k++)<br>dp[i][j]=(dp[i][j]+dp[i<span class="hljs-number">-1</span>][j-k])%<span class="hljs-number">1000007</span>;<br>cout&lt;&lt;dp[n][m]%<span class="hljs-number">1000007</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="D-算法提高-连接乘积"><a href="#D-算法提高-连接乘积" class="headerlink" title="D 算法提高 连接乘积"></a>D 算法提高 连接乘积</h2><h3 id="资源限制-3"><a href="#资源限制-3" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　192这个数很厉害，用它分别乘以1、2、3，会得到：<br>　　192 x 1 &#x3D; 192<br>　　192 x 2 &#x3D; 384<br>　　192 x 3 &#x3D; 576<br>　　把这三个乘积连起来，得到192384576，正好是一个1<del>9的全排列<br>　　我们把上面的运算定义为连接乘积：<br>　　m x (1 … n) &#x3D; k（其中m &gt; 0 且 n &gt; 1，对于上例，m &#x3D; 192、n &#x3D; 3、k &#x3D; 192384576）<br>　　即k是把m分别乘以1到n的乘积连接起来得到的，则称k为m和n的连接乘积。<br>　　按字典序输出所有不同的连接乘积k，满足k是1</del>9的全排列</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　每个k占一行</p><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><p>显然，结果中应包含一行：<br>192384576</p><h3 id="题意思路-3"><a href="#题意思路-3" class="headerlink" title="题意思路"></a>题意思路</h3><p>实在读不懂题。</p><p>题目的意思应该是说，有个数m，m*1+…+m*n&#x3D;k，k是一个1~9的全排列。然后把所有的k输出。暴力，从1-10000去尝试m，然后每多一项m*i，就检查一次当前的sum是否满足题意，如果满足的话添加进ans中。最后对ans进行排序输出。归类的话，应该算个模拟题吧…？</p><div style="page-break-after:always"></div><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;string&gt; ans;<br>string s[]=&#123;<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>&#125;;<br><span class="hljs-function">string <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    string ans;<br>    <span class="hljs-keyword">while</span>(n)<br>&#123;<br>        ans=ans+s[n%<span class="hljs-number">10</span>];<br>        n/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)<br>vis[s[i]-<span class="hljs-string">&#x27;0&#x27;</span>]++;<br><span class="hljs-keyword">if</span>(vis[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)<br><span class="hljs-keyword">if</span>(vis[i]!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100000</span>;i++)<br>&#123;<br>        string str;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">10</span>;j++)<br>&#123;<br>            str=str+<span class="hljs-built_in">change</span>(i*j);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(str))<br>&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="E-算法提高-最长公共子序列"><a href="#E-算法提高-最长公共子序列" class="headerlink" title="E 算法提高 最长公共子序列"></a>E 算法提高 最长公共子序列</h2><h3 id="资源限制-4"><a href="#资源限制-4" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　给定两个字符串，寻找这两个字串之间的最长公共子序列。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　输入两行，分别包含一个字符串，仅含有小写字母。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　最长公共子序列的长度。</p><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><p>abcdgh<br>aedfhb</p><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><p>3</p><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><p>　　最长公共子序列为a，d，h。</p><h3 id="数据规模和约定-2"><a href="#数据规模和约定-2" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　字串长度1~1000。</p><h3 id="题意思路-4"><a href="#题意思路-4" class="headerlink" title="题意思路"></a>题意思路</h3><p>​LCS板子题，字符串的做法和整数一样做。</p><div style="page-break-after:always"></div><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LCS</span><span class="hljs-params">(string s1,string s2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n=s1.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> m=s2.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> c[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||j==<span class="hljs-number">0</span>)<br>c[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s1[i<span class="hljs-number">-1</span>]==s2[j<span class="hljs-number">-1</span>])<br>c[i][j]=c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>c[i][j]=<span class="hljs-built_in">max</span>(c[i<span class="hljs-number">-1</span>][j],c[i][j<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c[n][m];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1,s2;<br>cin&gt;&gt;s1&gt;&gt;s2;<br>cout&lt;&lt;<span class="hljs-built_in">LCS</span>(s1,s2)&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="F-算法训练-和为零"><a href="#F-算法训练-和为零" class="headerlink" title="F 算法训练 和为零"></a>F 算法训练 和为零</h2><h3 id="资源限制-5"><a href="#资源限制-5" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　请考虑一个由 1 到 N （ N&#x3D;3, 4, 5 … 9 ）的数字组成的递增数列：1 2 3 … N。现在请在数列中插入“+”表示加，或者“-”表示减，抑或是“ ”表示空白，来将每一对数字组合在一起（请不在第一个数字前插入符号）。计算该表达式的结果并注意你是否得到了和为零。</p><p>　　请你写一个程序找出所有产生和为零的长度为N的数列。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　单独的一行表示整数N (3 &lt;&#x3D; N &lt;&#x3D; 9)。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　按照ASCII码的顺序，输出所有在每对数字间插入“+”, “-”, 或 “ ”后能得到和为零的数列。(注意:就算两个数字之间没有插入符号也应该保留空格)</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><p>7</p><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><p>1+2-3+4-5-6+7<br>1+2-3-4+5+6-7<br>1-2 3+4+5+6+7<br>1-2 3-4 5+6 7<br>1-2+3+4-5+6-7<br>1-2-3-4-5+6+7</p><h3 id="题意思路-5"><a href="#题意思路-5" class="headerlink" title="题意思路"></a>题意思路</h3><p>一眼看出dfs，激情写了30分钟还是错…….玉神加了一行秒了……但是不理解为什么加这行才能对？我觉得不应该加。等一个巨佬解释一下。</p><p>难点在于存要输出的东西。考虑到连续空格的情况，需要开sum和num两个数来维护当前值。sum用来存和，num特别用于连续空格，当出现空格时，num*&#x3D;10，num+&#x3D;k。在连续空格结束后，sum+&#x3D;num，num&#x3D;0。代码细节要多注意。</p><div style="page-break-after:always"></div><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">k当前数</span><br><span class="hljs-comment">sum 总和</span><br><span class="hljs-comment">num 空格（没加进sum的数）</span><br><span class="hljs-comment">s要输出的式子</span><br><span class="hljs-comment">fnum的符号</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> num,string s,<span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>num++;<span class="hljs-comment">//玉神の神之一手</span><br><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;1&#x27;</span>+k<span class="hljs-number">-1</span>;<br>s=s+ch;<br><span class="hljs-keyword">if</span>(k==n)<br>&#123;<br><span class="hljs-keyword">if</span>(sum+f*num==<span class="hljs-number">0</span>)<br>cout&lt;&lt;s&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,num*<span class="hljs-number">10</span>+k,s+<span class="hljs-string">&#x27; &#x27;</span>,f);<br>sum=sum+f*num;<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,k,s+<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(k+<span class="hljs-number">1</span>,sum,k,s+<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/11/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%835%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/05/11/21-22-1%E8%93%9D%E6%A1%A5%E8%AE%AD%E7%BB%835%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="21-22-1蓝桥训练5-题解"><a href="#21-22-1蓝桥训练5-题解" class="headerlink" title="21-22-1蓝桥训练5 题解"></a>21-22-1蓝桥训练5 题解</h2><h1 id="21-22-1蓝桥训练5-题解-1"><a href="#21-22-1蓝桥训练5-题解-1" class="headerlink" title="21-22-1蓝桥训练5 题解"></a>21-22-1蓝桥训练5 题解</h1><h2 id="A-算法训练-乘积最大"><a href="#A-算法训练-乘积最大" class="headerlink" title="A 算法训练 乘积最大"></a>A 算法训练 乘积最大</h2><h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>　　今年是国际数学联盟确定的“2000——世界数学年”，又恰逢我国著名数学家华罗庚先生诞辰90周年。在华罗庚先生的家乡江苏金坛，组织了一场别开生面的数学智力竞赛的活动，你的一个好朋友XZ也有幸得以参加。活动中，主持人给所有参加活动的选手出了这样一道题目：</p><p>　　设有一个长度为N的数字串，要求选手使用K个乘号将它分成K+1个部分，找出一种分法，使得这K+1个部分的乘积能够为最大。</p><p>　　同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：</p><p>　　有一个数字串：312， 当N&#x3D;3，K&#x3D;1时会有以下两种分法：</p><p>$$<br>3*12&#x3D;12<br>$$</p><p>$$<br>31*2&#x3D;62<br>$$</p><p>　　这时，符合题目要求的结果是：<br>$$<br>31*2&#x3D;62<br>$$<br>　　现在，请你帮助你的好朋友XZ设计一个程序，求得正确的答案。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>　　第一行共有2个自然数N，K（6≤N≤40，1≤K≤6）<br>　　第二行是一个长度为N的数字串。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>　　输出所求得的最大乘积（一个自然数）。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><p>4 2<br>1231</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><p>62</p><h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a><strong>思路解析</strong></h3><p>​这题我用dp写的，有聚聚说爆搜也能过，没试过。</p><p>​用dp数组存储当前状态，dp[i][j]表示长度为i+1的字符串填入j个乘号所得的最大值。</p><p>​当j&#x3D;&#x3D;0时，所求得的数就是给出的字符串。</p><p>​长度为i的字符串填入j个乘号所得值 等于 长度为p的字符串（p小于i）填入j-1个乘号所得值 乘以 p+1到i的字符串代表的数。自定义函数ll f(int u,int v)的作用是将a[u]~a[v]的这一部分元素转换成整数。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><strong>AC代码</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> n,k,a[<span class="hljs-number">50</span>];<br>ll dp[<span class="hljs-number">50</span>][<span class="hljs-number">10</span>],ret;<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>ret=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=u;i&lt;=v;i++)<br>&#123;<br>ret*=<span class="hljs-number">10</span>;<br>ret+=a[i];<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;ch;<br>a[i]=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>,i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;i;p++)<br>dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[p][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">f</span>(p+<span class="hljs-number">1</span>,i));<br>cout&lt;&lt;dp[n<span class="hljs-number">-1</span>][k]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="B-算法提高-金陵十三钗"><a href="#B-算法提高-金陵十三钗" class="headerlink" title="B 算法提高 金陵十三钗"></a>B 算法提高 金陵十三钗</h2><h3 id="资源限制-1"><a href="#资源限制-1" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　在电影《金陵十三钗》中有十二个秦淮河的女人要自我牺牲代替十二个女学生去赴日本人的死亡宴会。为了不让日本人发现，自然需要一番乔装打扮。但由于天生材质的原因，每个人和每个人之间的相似度是不同的。由于我们这是编程题，因此情况就变成了金陵n钗。给出n个女人和n个学生的相似度矩阵，求她们之间的匹配所能获得的最大相似度。<br>　　所谓相似度矩阵是一个n*n的二维数组like[i][j]。其中i,j分别为女人的编号和学生的编号，皆从0到n-1编号。like[i][j]是一个0到100的整数值，表示第i个女人和第j个学生的相似度，值越大相似度越大，比如0表示完全不相似，100表示百分之百一样。每个女人都需要找一个自己代替的女学生。<br>　　最终要使两边一一配对，形成一个匹配。请编程找到一种匹配方案，使各对女人和女学生之间的相似度之和最大。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　第一行一个正整数n表示有n个秦淮河女人和n个女学生<br>　　接下来n行给出相似度，每行n个0到100的整数，依次对应二维矩阵的n行n列。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　仅一行，一个整数，表示可获得的最大相似度。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><p>4<br>97 91 68 14<br>8 33 27 92<br>36 32 98 53<br>73 7 17 82</p><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><p>354</p><h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　对于70%的数据，n&lt;&#x3D;10<br>　　对于100%的数据，n&lt;&#x3D;13</p><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>　　最大相似度为91+92+93+73&#x3D;354</p><h3 id="思路解析-1"><a href="#思路解析-1" class="headerlink" title="思路解析"></a>思路解析</h3><p>状压dp题，最开始用dfs写，最后3个样例t了。可以考虑记忆化dfs或者dp</p><p>因为最多只有13个学生，每个学生用一位二进制表示，可以压缩成一个整数<br>例如1010 （大-&gt;小） 可以表示配对了第二个第四个学生<br>将学生的下标从0开始计数比较方便，这样1&lt;&lt; i就代表第i个学生了。<br>可以根据配对了几个学生选择第几个女人来配对，这样就能降一维了。<br>例如：1010配对了两个学生，可以由第一个女人和第二个学生配对转移过来，也可以由第一个女人和第四个学生转移过来</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,t,tmp,a[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>],dp[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>cin&gt;&gt;a[i][j];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)<br>    &#123;<br>        tmp=i,t=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(tmp) <br>        &#123;<br>            t++;<br>            tmp-=tmp&amp;-tmp;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j))<br>                dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[i^(<span class="hljs-number">1</span>&lt;&lt;j)]+a[t][j]);<br>    &#125;<br>    cout&lt;&lt;dp[(<span class="hljs-number">1</span>&lt;&lt;n)<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="C-算法提高-上帝造题五分钟"><a href="#C-算法提高-上帝造题五分钟" class="headerlink" title="C 算法提高 上帝造题五分钟"></a>C 算法提高 上帝造题五分钟</h2><h3 id="资源限制-2"><a href="#资源限制-2" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　第一分钟，上帝说：要有题。于是就有了L，Y，M，C<br>　　第二分钟，LYC说：要有向量。于是就有了长度为n写满随机整数的向量<br>　　第三分钟，YUHCH说：要有查询。于是就有了Q个查询，查询向量的一段区间内元素的最小值<br>　　第四分钟，MZC说：要有限。于是就有了数据范围<br>　　第五分钟，CS说：要有做题的。说完众神一哄而散，留你来收拾此题</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　第一行两个正整数n和Q，表示向量长度和查询个数<br>　　接下来一行n个整数，依次对应向量中元素：a[0]，a[1]，…，a[n-1]<br>　　接下来Q行，每行两个正整数lo，hi，表示查询区间[lo, hi]中的最小值，即min(a[lo],a[lo+1],…,a[hi])。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　共Q行，依次对应每个查询的结果，即向量在对应查询区间中的最小值。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><p>7 4<br>1 -1 -4 8 1 2 -7<br>0 0<br>1 3<br>4 5<br>0 6</p><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><p>1<br>-4<br>1<br>-7</p><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><p>　　第一个查询[0,0]表示求min{a[0]}&#x3D;min{1}&#x3D;1<br>　　第二个查询[1,3]表示求min{a[1],a[2],a[3]}&#x3D;min{-1,-4,8}&#x3D;-4<br>　　第三个查询[4,5]表示求min{a[4],a[5]}&#x3D;min{1,2}&#x3D;1<br>　　第四个查询[0,6]表示查询整个向量，求min{a[0..6]}&#x3D;min{1,-1,-4,8,1,2,-7}&#x3D;-7</p><h3 id="数据规模和约定-1"><a href="#数据规模和约定-1" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　1&lt;&#x3D;n&lt;&#x3D;1984，1&lt;&#x3D;Q&lt;&#x3D;1988，向量中随机整数的绝对值不超过1,000</p><h3 id="思路解析-2"><a href="#思路解析-2" class="headerlink" title="思路解析"></a>思路解析</h3><p>​数据规模太小了，直接暴力就过了。对于每一组输入的lo和hi，遍历a[lo]~a[hi]中的所有元素，取得最小的元素。</p><p>​当数据规模大起来，并且要对元素进行修改的时候，就要涉及到一种高级数据结构——线段树。这里不做提及，毕竟杀鸡不用牛刀。</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,lo,hi,ans,a[<span class="hljs-number">2000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>cin&gt;&gt;a[i];<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;lo&gt;&gt;hi;<br>ans=<span class="hljs-number">2005</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=lo;i&lt;=hi;i++)<br>ans=<span class="hljs-built_in">min</span>(ans,a[i]);<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="D-算法训练-C-Calculations"><a href="#D-算法训练-C-Calculations" class="headerlink" title="D 算法训练 C*++ Calculations"></a>D 算法训练 C*++ Calculations</h2><h3 id="资源限制-3"><a href="#资源限制-3" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：2.0s  内存限制：64.0MB</p><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　C*++语言和C++语言非常相似，然而C*++的程序有时会出现意想不到的结果。比如像这样的算术表达式：<br>　　表达式&#x3D;基本式 &#x2F; 表达式+基本式 &#x2F; 表达式-基本式<br>　　基本式&#x3D;增量 &#x2F; 系数*增量<br>　　增量&#x3D;a++ &#x2F; ++a<br>　　系数&#x3D;0&#x2F;1&#x2F;2&#x2F;……&#x2F;1000<br>　　如“5*a++-3*++a+a++”是合法的C*++表达式。<br>　　计算这样的表达式的值的方法：首先是每个基本式进行计算，然后按照正常的算术运算法则计算。如果一个基本式包含“a++”，则先进行乘法运算再使变量a权值+1；如果一个基本式包含“++a”，则先使变量a权值+1再进行乘法运算。<br>　　然而基本式可以按任意顺序计算，这就是为什么计算结果是完全无法预料的。<br>　　你的任务就是去找到最大的可能结果。</p><p>　　第一行，一个整数n，表示变量a的初始值</p><p>​第二行，一个合法的C*++表达式。</p><p>​共一行，一个整数ans，表示最大可能结果。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>　　input 1:<br>　　1<br>　　5*a++-3*++a+a++<br>　　input 2:<br>　　3<br>　　a+++++a</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　output 1:<br>　　11<br>　　output 2:<br>　　8</p><h3 id="数据规模和约定-2"><a href="#数据规模和约定-2" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>　　对于20%的数据，表达式长度&lt;&#x3D;20。<br>　　另有20%的数据，满足n&gt;&#x3D;0。<br>　　对于100%的数据，-1000&lt;&#x3D;n&lt;&#x3D;1000，表达式长度&lt;&#x3D;10000。<br>　　注意表达式开头可能有负号！</p><h3 id="思路解析-3"><a href="#思路解析-3" class="headerlink" title="思路解析"></a>思路解析</h3><p>​模拟，增量表达式只有a++和++a两种，将所有的系数提出来排序，从小到大进行模拟运算即可。注意，++a要先给变量a变大，后进行乘法运算。</p><p>​ps：Codeforces Problemset 39A~</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> flag;<br><span class="hljs-type">int</span> a,n,k,r,ans;<br><span class="hljs-type">int</span> w[<span class="hljs-number">10011</span>],tmp;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100011</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n%s&quot;</span>,&amp;a,s+<span class="hljs-number">1</span>);<br>n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(s[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&gt;<span class="hljs-number">1</span>;i--)<br>s[i]=s[i<span class="hljs-number">-1</span>];<br>s[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;+&#x27;</span>;<br>n++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i+=<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (s[i++]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>k=<span class="hljs-number">-1</span>;<br>r=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;=n&amp;&amp;<span class="hljs-string">&#x27;0&#x27;</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>(r*=<span class="hljs-number">10</span>)+=s[i++]<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">if</span> (s[i]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>i++;<br><span class="hljs-keyword">else</span><br>r=<span class="hljs-number">1</span>;<br>w[++tmp]=(k*=r);<br>ans+=(a-(s[i]==<span class="hljs-string">&#x27;a&#x27;</span>))*k;<br>&#125;<br><span class="hljs-built_in">sort</span>(w+<span class="hljs-number">1</span>,w+tmp+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=tmp;i++)<br>ans+=i*w[i];<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="E-算法训练-特殊的数字四十"><a href="#E-算法训练-特殊的数字四十" class="headerlink" title="E 算法训练 特殊的数字四十"></a>E 算法训练 特殊的数字四十</h2><h3 id="资源限制-4"><a href="#资源限制-4" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　1234是一个非常特殊的四位数，因为它的各位数之和为10，编程求所有这样的四位十进制数。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　按从小到大的顺序输出满足条件的四位十进制数。每个数字占用一行。</p><h3 id="思路解析-4"><a href="#思路解析-4" class="headerlink" title="思路解析"></a>思路解析</h3><p>本题要求所有满足各位和为10的四位数，所以遍历所有的4位数，如果4位和为10则成立，输出。</p><p>另外可以按位去推，3层循环也可以推出来，这里不做展示。</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmp,sum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1000</span>;i&lt;<span class="hljs-number">10000</span>;i++)<br>&#123;<br>tmp=i;<br>sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(tmp)<br>&#123;<br>sum+=tmp%<span class="hljs-number">10</span>;<br>tmp/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==<span class="hljs-number">10</span>)<br>cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="page-break-after:always"></div><h2 id="F-算法提高-五次方数"><a href="#F-算法提高-五次方数" class="headerlink" title="F 算法提高 五次方数"></a>F 算法提高 五次方数</h2><h3 id="资源限制-5"><a href="#资源限制-5" class="headerlink" title="资源限制"></a>资源限制</h3><p>​时间限制：1.0s  内存限制：256.0MB</p><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　对一个数十进制表示时的每一位数字乘五次方再求和，会得到一个数的五次方数<br>　　例如：1024的五次方数为1+0+32+1024&#x3D;1057<br>　　有这样一些神奇的数，它的五次方数就是它自己，而且这样的数竟然只有有限多个<br>　　从小到大输出所有这样的数</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　每个数独立一行输出</p><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><p>10<br>200<br>3000</p><h3 id="思路解析-5"><a href="#思路解析-5" class="headerlink" title="思路解析"></a>思路解析</h3><p>首先，我们知道9的五次方<br>$$<br>9^5&#x3D;59,049<br>$$<br>设位数为n，由题意得到<br>$$<br>10^n≤9^5*n<br>$$<br>每次逐渐增加位数n，推出 n最大为6</p><p>所以从0开始遍历到1e6+5即可得到所有的答案，但是本题答案错了，没有包含0和1这两项。</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmp,k,sum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000005</span>;i++)<br>&#123;<br>tmp=i,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(tmp)<br>&#123;<br>k=tmp%<span class="hljs-number">10</span>;<br>sum+=<span class="hljs-built_in">pow</span>(k,<span class="hljs-number">5</span>);<br>tmp/=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(sum&gt;i)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==i)<br>cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/11/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2CCSU2022%E5%A4%8F%E5%AD%A3%E6%A0%A1%E8%B5%9B-%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/05/11/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2CCSU2022%E5%A4%8F%E5%AD%A3%E6%A0%A1%E8%B5%9B-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 长沙学院CCSU2022夏季校赛-题解<br></code></pre></td></tr></table></figure><h1 id="长沙学院CCSU2022夏季校赛-题解"><a href="#长沙学院CCSU2022夏季校赛-题解" class="headerlink" title="长沙学院CCSU2022夏季校赛-题解"></a>长沙学院CCSU2022夏季校赛-题解</h1><h2 id="A-小贪一手"><a href="#A-小贪一手" class="headerlink" title="A. 小贪一手"></a>A. 小贪一手</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定整数$n,x,y$请问$[1,n]$范围内的最大正整数$k$满足$k%x&#x3D;y$</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行一个正整数$t$，表示有$t$组数据</p><p>接下来$t$行，每行三个正整数$x,y,n$，如题面所述</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>对于每个测试案例，打印答案——最大的非负整数$k$，使$0\le k\le n$ 且 $k\mod x&#x3D;y$。可以保证答案总是存在的。</p><h3 id="数据规模与约束"><a href="#数据规模与约束" class="headerlink" title="数据规模与约束"></a>数据规模与约束</h3><p>$1\le t\le5\times10^4 $</p><p>$2\le x\le 10^9$</p><p>$0\le y \lt x$</p><p>$y\le n\le 10^9$</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span> <span class="hljs-number">12345</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">8</span> <span class="hljs-number">54321</span><br><span class="hljs-symbol">499999993 </span><span class="hljs-number">9</span> <span class="hljs-number">1000000000</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">187</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span> <span class="hljs-number">999999999</span><br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">12339</span><br><span class="hljs-number">0</span><br><span class="hljs-number">15</span><br><span class="hljs-number">54306</span><br><span class="hljs-number">999999995</span><br><span class="hljs-number">185</span><br><span class="hljs-number">999999998</span><br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题来自于<a href="https://codeforces.com/contest/1374">Codeforces Round #653 (Div. 3)</a>A题，指路<a href="https://codeforces.com/contest/1374/problem/A">1374A</a></p><p>贪心，我们要使得  $k\mod x &#x3D; y$ ，且 $k$ 最大。那么 $k$ 满足 $k&#x3D;t<em>x+y$ ,所以 $(k-y)%x&#x3D;0$ 。我们令 $m&#x3D;n-y$ ，题目就成了在 $[0,m]$ 范围内找最大的 $x$ 的倍数。$m$ 是 $k$  的 $\frac{m}{k}$ 倍，对它进行取整得到倍数 $t$ ，然后输出 $t</em>x+y$ 即为答案。数据规模在 $10^9$ 范围内，所以使用int型即可，不用考虑数据溢出问题。</p><h3 id="STD"><a href="#STD" class="headerlink" title="STD"></a>STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t,n,x,y;<br><span class="hljs-keyword">for</span>(cin&gt;&gt;t;t--;cout&lt;&lt;(n-y)/x*x+y&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>)<br>cin&gt;&gt;x&gt;&gt;y&gt;&gt;n;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-A-B-Problem-very-easy"><a href="#B-A-B-Problem-very-easy" class="headerlink" title="B. A+B Problem (very easy)"></a>B. A+B Problem (very easy)</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>人之初，A+B。你需要对给定字符串计算出答案，并用英文的形式输出。具体操作见样例，题目输入字符串保证不会出现除了小写英文字母、加法符号‘+’、连词符’-‘以外的任何符号。</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行一个整数T，表示数据的组数。</p><p>接下来每行一个字符串，表示需要进行计算的式子。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>T行，每行一个字符串表示计算得到的答案</p><h3 id="数据规模与约束-1"><a href="#数据规模与约束-1" class="headerlink" title="数据规模与约束"></a>数据规模与约束</h3><p>T≤10，所有给定字符串长度不超过100，参与加法的数字最大不大于99</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">6</span><br><span class="hljs-literal">zero</span><br><span class="hljs-literal">one</span>+<span class="hljs-literal">two</span>+<span class="hljs-literal">three</span>+<span class="hljs-literal">four</span>+<span class="hljs-literal">five</span>+<span class="hljs-literal">six</span>+<span class="hljs-literal">seven</span>+<span class="hljs-literal">eight</span>+<span class="hljs-literal">nine</span>+<span class="hljs-literal">ten</span><br>eleven+twelve+thirteen+fourteen+fifteen+sixteen<br>seventeen+eighteen+nineteen<br>twenty+thirty+forty+fifty+sixty+seventy+eighty+ninety<br>ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+ninety-<span class="hljs-literal">nine</span>+<span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>55<br>81<br>54<br>440<br>794<br></code></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zero</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">one</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">two</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">three</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">four</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">five</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">six</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">seven</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">eight</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">nine</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">ten</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">eleven</span> <span class="hljs-number">11</span><br><span class="hljs-attribute">twelve</span> <span class="hljs-number">12</span><br><span class="hljs-attribute">thirteen</span> <span class="hljs-number">13</span><br><span class="hljs-attribute">fourteen</span> <span class="hljs-number">14</span><br><span class="hljs-attribute">fifteen</span> <span class="hljs-number">15</span><br><span class="hljs-attribute">sixteen</span> <span class="hljs-number">16</span><br><span class="hljs-attribute">seventeen</span> <span class="hljs-number">17</span><br><span class="hljs-attribute">eighteen</span> <span class="hljs-number">18</span><br><span class="hljs-attribute">nineteen</span> <span class="hljs-number">19</span><br><span class="hljs-attribute">twenty</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">thirty</span> <span class="hljs-number">30</span><br><span class="hljs-attribute">forty</span> <span class="hljs-number">40</span><br><span class="hljs-attribute">fifty</span> <span class="hljs-number">50</span><br><span class="hljs-attribute">sixty</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">seventy</span> <span class="hljs-number">70</span><br><span class="hljs-attribute">eighty</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">ninety</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>一个很简单的模拟题，考察了对STL_map的运用（当然别的形如字符串数组的东西也可以）。</p><p>出题人因为这道题被锐评了……，感谢eroengine同学提供idea。</p><p>我们使用 $map&lt;string,int&gt;$ 来满足字符串和数字之间的键值对应，在处理输入输出字符串的时候，不难发现 $+$ 和 $-$ 字符对于答案没有影响，作为连词符，它的作用与加法符号一样。所以我们直接计算每一个字符串所代表的数字和即可。</p><p>有人吐槽本题是码农题，可是这题可以把备注中的内容复制了用一个新的形式输出（自己另外写一个转换程序），然后把形如 $map[seventeen]&#x3D;17$ 的28行式子复制进本题的需要提交的代码中就行咯。或者可以选择用正则表达式、文本编辑器等工具实现替换，复制完了单词表题目就很简单了。记得输出 $and$ 哦~</p><h3 id="STD-1"><a href="#STD-1" class="headerlink" title="STD"></a>STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>mp[<span class="hljs-string">&quot;zero&quot;</span>]=<span class="hljs-number">0</span>;<br>mp[<span class="hljs-string">&quot;one&quot;</span>]=<span class="hljs-number">1</span>;<br>mp[<span class="hljs-string">&quot;two&quot;</span>]=<span class="hljs-number">2</span>;<br>mp[<span class="hljs-string">&quot;three&quot;</span>]=<span class="hljs-number">3</span>;<br>mp[<span class="hljs-string">&quot;four&quot;</span>]=<span class="hljs-number">4</span>;<br>mp[<span class="hljs-string">&quot;five&quot;</span>]=<span class="hljs-number">5</span>;<br>mp[<span class="hljs-string">&quot;six&quot;</span>]=<span class="hljs-number">6</span>;<br>mp[<span class="hljs-string">&quot;seven&quot;</span>]=<span class="hljs-number">7</span>;<br>mp[<span class="hljs-string">&quot;eight&quot;</span>]=<span class="hljs-number">8</span>;<br>mp[<span class="hljs-string">&quot;nine&quot;</span>]=<span class="hljs-number">9</span>;<br>mp[<span class="hljs-string">&quot;ten&quot;</span>]=<span class="hljs-number">10</span>;<br>mp[<span class="hljs-string">&quot;eleven&quot;</span>]=<span class="hljs-number">11</span>;<br>mp[<span class="hljs-string">&quot;twelve&quot;</span>]=<span class="hljs-number">12</span>;<br>mp[<span class="hljs-string">&quot;thirteen&quot;</span>]=<span class="hljs-number">13</span>;<br>mp[<span class="hljs-string">&quot;fourteen&quot;</span>]=<span class="hljs-number">14</span>;<br>mp[<span class="hljs-string">&quot;fifteen&quot;</span>]=<span class="hljs-number">15</span>;<br>mp[<span class="hljs-string">&quot;sixteen&quot;</span>]=<span class="hljs-number">16</span>;<br>mp[<span class="hljs-string">&quot;seventeen&quot;</span>]=<span class="hljs-number">17</span>;<br>mp[<span class="hljs-string">&quot;eighteen&quot;</span>]=<span class="hljs-number">18</span>;<br>mp[<span class="hljs-string">&quot;nineteen&quot;</span>]=<span class="hljs-number">19</span>;<br>mp[<span class="hljs-string">&quot;twenty&quot;</span>]=<span class="hljs-number">20</span>;<br>mp[<span class="hljs-string">&quot;thirty&quot;</span>]=<span class="hljs-number">30</span>;<br>mp[<span class="hljs-string">&quot;forty&quot;</span>]=<span class="hljs-number">40</span>;<br>mp[<span class="hljs-string">&quot;fifty&quot;</span>]=<span class="hljs-number">50</span>;<br>mp[<span class="hljs-string">&quot;sixty&quot;</span>]=<span class="hljs-number">60</span>;<br>mp[<span class="hljs-string">&quot;seventy&quot;</span>]=<span class="hljs-number">70</span>;<br>mp[<span class="hljs-string">&quot;eighty&quot;</span>]=<span class="hljs-number">80</span>;<br>mp[<span class="hljs-string">&quot;ninety&quot;</span>]=<span class="hljs-number">90</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> t,ans;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br>string s,tmp=<span class="hljs-string">&quot;&quot;</span>;<br>cin&gt;&gt;s;<br>s+=<span class="hljs-string">&#x27;+&#x27;</span>;<br>ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:s)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-string">&#x27;+&#x27;</span>||i==<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br>ans+=mp[tmp];<br>tmp=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>tmp+=i;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-签签签到"><a href="#C-签签签到" class="headerlink" title="C. 签签签到"></a>C. 签签签到</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>戴戴大师兄不小心把整套题的难度出高了，所以他打算放一个签到题。 </p><p>签到题肯定不能弄得特别难，所以他决定让你输出一个<a href="https://pasteme.gxuca.team/1743">字符串</a>。 </p><p>为了放松气氛，戴戴大师兄决定给大家看一点好玩的图，这张图和题目没有关系。 </p><p>  <img src="https://uploadfiles.nowcoder.com/images/20220426/322212_1650968118981/AE61F053444D9D31264940EF73ECBAD8" alt="img"><br>然后，你要做的就是点开<a href="https://pasteme.gxuca.team/1744">云剪切板链接</a>，然后把<a href="https://pasteme.gxuca.team/1744">字符串</a>输出。 </p><p>提示：<a href="https://pasteme.gxuca.team/1744">云剪切板链接</a>和<a href="https://pasteme.gxuca.team/1744">字符串</a>的字样上都有超链接，把鼠标移到上面的话上就可以看到字变色了，就可以打开云剪切板了。 </p><p>做题目一定要仔细哦~心急吃不了热豆腐</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这题还蛮好玩的，出个这个活跃一下气氛，感谢沙烬同学提供idea。</p><p>本题的题面中共有5个超链接，在图片下方的4个都是假的超链接，点开后会是这么一句话<br>$$<br>Make \quad CCSU_ACM \quad Great \quad Again<br>$$<br>这句话应该是每一个CCSU_ACMer共同的梦想。</p><p>但是很可惜，本题的答案不是这句话。图片上方有还有一个超链接，点开后是如下字样<br>$$<br>%d%\verb||n\verb|”|<br>$$<br>你需要做的是在不转义的情况下输出一下字符串，使用R”(STRING)”可以实现字符串不转义输出。</p><p>PS：轻点喷，鼠标放在超链接上的时候可以看到下面四个都写了“别点”，最上面那个才有“这是正确答案”。不信你再去试一试！</p><h3 id="STD-2"><a href="#STD-2" class="headerlink" title="STD"></a>STD</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">R&quot;(%d%\n&quot;)&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-Alice-and-Bob"><a href="#D-Alice-and-Bob" class="headerlink" title="D. Alice and Bob"></a>D. Alice and Bob</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    Alice 和 Bob 又在玩游戏，今天他们玩抽牌游戏。已知牌堆有共 $n$ 张牌，两个人轮流从桌面上抓牌，记每次抓牌前牌堆有 $s$ 张牌，则两人每一次至少取 $1$ 张牌，至多取 $\lceil \frac{s}{2}\rceil$张牌。当一个人没有牌可以取时（即牌堆余量为0张牌时），他就输掉了游戏。对于给定的 $n$ 张牌来说，Bob 先取，<strong>请问Alice能否赢得游戏</strong>？能则输出 <strong>YES</strong> ，否则输出 <strong>NO</strong>。（假设 Alice 和 Bob 都足够聪明)</p><p>注：$\lceil x\rceil$表示不大于$x$的最大整数，例如$\lceil \frac{1}{114514}\rceil&#x3D;1$</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行一个正整数 $t$ ，表示有 $t$ 组数据。</p><p>接下来 $t$ 行每行一个正整数 $n$ 表示牌堆里牌的数量</p><p>$1≤t≤100000$</p><p>$1≤n≤1000$</p><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出 $t$ 行，每行一个英文大写字符串表示Alice的胜负状态。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/11/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E2%80%9C%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF%E2%80%9D2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
    <url>/2022/05/11/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E2%80%9C%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF%E2%80%9D2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: 长沙学院“飞腾迈创杯”<span class="hljs-number">2022</span>年新生赛<br></code></pre></td></tr></table></figure><h1 id="长沙学院“飞腾迈创杯”2022年新生赛"><a href="#长沙学院“飞腾迈创杯”2022年新生赛" class="headerlink" title="长沙学院“飞腾迈创杯”2022年新生赛"></a>长沙学院“飞腾迈创杯”2022年新生赛</h1><h2 id="【比赛链接】"><a href="#【比赛链接】" class="headerlink" title="【比赛链接】"></a>【比赛链接】</h2><p>比赛地址：<a href="https://www.nowcoder.com/acm/contest/34092">https://www.nowcoder.com/acm/contest/34092</a></p><p>邀请码：ccsu2022acm</p><h2 id="【比赛信息】"><a href="#【比赛信息】" class="headerlink" title="【比赛信息】"></a>【比赛信息】</h2><p>比赛时间：5月7日13:30-17:30，共4小时</p><p>报名截止时间：5月6日14:00</p><p>主办单位：长沙学院计算机工程与应用数学学院</p><h2 id="【比赛简介】"><a href="#【比赛简介】" class="headerlink" title="【比赛简介】"></a>【比赛简介】</h2><p>飞腾迈创（FT-Matrix）系列DSP是由国防科大计算机学院微电子所自主设计研发的高性能微处理器。经过十多年的发展，已经形成包括32位，64位，单核，多核，以及IP核在内的多条产品线，成功应用于包括超算，导航、网络处理等多个国家级关键平台上。目前，FT-Matrix DSP已经与湖南大学，中南大学，武汉大学，浙江大学，武汉理工、湖南科技大学以及军事科学院等多所国内高校和科研院所建立了生态合作伙伴关系，在共同探索飞腾迈创处理器更多应用场景的同时也培养了一大批熟悉处理器底层编程优化的软件人才，就职于国家级科研院所，以及诸如大疆、阿里、华为等知名企业中。当前，飞腾迈创应用生态在正以开放的姿态欢迎各位有志青年的加入，联系人王老师（13755137641）。</p><p>ACM国际大学生程序设计竞赛（全称：ACM International Collegiate Programming Contest，简称ACM-ICPC）是由美国计算机协会（ACM）主办，旨在展示当代大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过40多年的发展，ACM国际大学生程序设计竞赛已经发展成为全球最高规格、最具影响力的大学生程序设计竞赛。此次比赛基于ICPC竞赛模式，旨在培养选拔ICPC竞赛人才，在竞赛中表现优异的校内同学可加入我校ACM集训队开展训练，有机会代表我校参加ICPC国际大学生程序设计竞赛和CCPC中国大学生程序设计竞赛。</p><p>比赛共有9道题。每道题提交之后都有反馈，可以看到“通过”、“运行错误”、“答案错误”等结果。每道题都有多个测试点，只有通过所有测试点才算通过本题。每一次未通过的提交算20分钟罚时，单题得分记为通过该题时的比赛时间+该题罚时。比赛结束后按照学生的用时来排名，时间越短排名越前，时间相同则并列。</p><h2 id="【组织机构】"><a href="#【组织机构】" class="headerlink" title="【组织机构】"></a>【组织机构】</h2><p>主办：长沙学院计算机工程与应用数学学院 </p><p>承办：CCSU ACM TEAM</p><p>赞助：飞腾迈创（FT-Matrix）</p><p>网络赛技术支持：牛客网（nowcoder.com）</p><p>指导教师：黄娟</p><h2 id="【参赛对象】"><a href="#【参赛对象】" class="headerlink" title="【参赛对象】"></a>【参赛对象】</h2><p>本次比赛主要面向长沙学院2021级ACM队员，同时也欢迎非竞赛队队员参赛，欢迎其他学校同学参赛交流。</p><h2 id="【命题】"><a href="#【命题】" class="headerlink" title="【命题】"></a>【命题】</h2><p>本次比赛采取部分原创+部分改编的命题方式，由CCSU2020ACM竞赛队队员担任命题工作。</p><h2 id="【鸣谢】"><a href="#【鸣谢】" class="headerlink" title="【鸣谢】"></a>【鸣谢】</h2><p>特别感谢飞腾迈创（FT-Matrix）对本次比赛的大力支持。</p><p>感谢伙伴们的验题：<a href="https://ac.nowcoder.com/acm/contest/profile/807217677">式守さん</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/598662942"> LeiLeiKunLe</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/810308130"> Pedestrian1</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/767026510">C972937</a>，<a href="https://ac.nowcoder.com/profile/856779928?noredirect=true">猫猫是战旗小家伙</a> ，<a href="https://ac.nowcoder.com/acm/contest/profile/574103561">工口发动机</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/61174257"> 长路漫漫亦灿灿</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/999996626">L1ngYu</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/877350534">凌乱之风</a>，<a href="https://ac.nowcoder.com/acm/contest/profile/876595926">Wayne_0v0</a>，<a href="https://ac.nowcoder.com/profile/563101042?noredirect=true">竹_yin</a> ，<a href="https://ac.nowcoder.com/profile/236063124?noredirect=true">沙烬</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/10/hello-world/"/>
    <url>/2022/05/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
